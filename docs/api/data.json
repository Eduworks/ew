{
    "project": {
        "name": "EW Library",
        "description": "EW Library API: ",
        "version": "5.0.0",
        "url": "http://ew.eduworks.org/",
        "logo": "http://eduworks.com/img/eduworkslogo-menu.png"
    },
    "files": {
        "ew.common/src/main/java/com/eduworks/interfaces/EwDisplayable.java": {
            "name": "ew.common/src/main/java/com/eduworks/interfaces/EwDisplayable.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/interfaces/EwJsonSerializable.java": {
            "name": "ew.common/src/main/java/com/eduworks/interfaces/EwJsonSerializable.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/EwFactory.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/EwFactory.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/EwHashMap.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/EwHashMap.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/EwHashSet.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/EwHashSet.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/EwList.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/EwList.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/EwText.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/EwText.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/lang/EwTextSpan.java": {
            "name": "ew.common/src/main/java/com/eduworks/lang/EwTextSpan.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/util/io/EwFileSystem.java": {
            "name": "ew.common/src/main/java/com/eduworks/util/io/EwFileSystem.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/util/Tuple.java": {
            "name": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.common/src/main/java/com/eduworks/EwVersion.java": {
            "name": "ew.common/src/main/java/com/eduworks/EwVersion.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/util/JSONUtils.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/util/JSONUtils.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/AdHocView.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/AdHocView.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java": {
            "name": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java": {
            "name": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java": {
            "name": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.base/src/main/java/com/eduworks/cruncher/cache/CruncherCache.java": {
            "name": "ew.levr.base/src/main/java/com/eduworks/cruncher/cache/CruncherCache.java",
            "modules": {
                "ew.levr.base": 1
            },
            "classes": {
                "CruncherCache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java": {
            "name": "ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java": {
            "name": "ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java": {
            "name": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java": {
            "name": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.base/src/main/java/com/eduworks/resolver/service/CruncherSendEmail.java": {
            "name": "ew.levr.base/src/main/java/com/eduworks/resolver/service/CruncherSendEmail.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java": {
            "name": "ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java": {
            "name": "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.core/src/main/java/com/eduworks/resolver/lang/LevrJsParser.java": {
            "name": "ew.levr.core/src/main/java/com/eduworks/resolver/lang/LevrJsParser.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.core/src/main/java/com/eduworks/resolver/CruncherBindWebService.java": {
            "name": "ew.levr.core/src/main/java/com/eduworks/resolver/CruncherBindWebService.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.core/src/main/java/com/eduworks/resolver/CruncherJavascriptBinder.java": {
            "name": "ew.levr.core/src/main/java/com/eduworks/resolver/CruncherJavascriptBinder.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.core/src/main/java/com/eduworks/resolver/ResolverFactory.java": {
            "name": "ew.levr.core/src/main/java/com/eduworks/resolver/ResolverFactory.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.core/src/main/java/com/eduworks/App.java": {
            "name": "ew.levr.core/src/main/java/com/eduworks/App.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java": {
            "name": "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java": {
            "name": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java": {
            "name": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java": {
            "name": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java": {
            "name": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java": {
            "name": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ew.ontology/src/main/java/com/eduworks/ontology/OntologyWrapper.java": {
            "name": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyWrapper.java",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ew.levr.base": {
            "name": "ew.levr.base",
            "submodules": {},
            "elements": {},
            "classes": {
                "CruncherCache": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "ew.levr.base/src/main/java/com/eduworks/cruncher/cache/CruncherCache.java",
            "line": 15,
            "description": "Caches a result, and fetches it automatically if it is in cache. Use Name to\nspecify cache key."
        }
    },
    "classes": {
        "CruncherCache": {
            "name": "CruncherCache",
            "shortname": "CruncherCache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ew.levr.base",
            "file": "ew.levr.base/src/main/java/com/eduworks/cruncher/cache/CruncherCache.java",
            "line": 15,
            "description": "Caches a result, and fetches it automatically if it is in cache. Use Name to\nspecify cache key.",
            "author": "devlin.junker@eduworks.com"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "ew.common/src/main/java/com/eduworks/interfaces/EwDisplayable.java",
            "line": 3,
            "description": "Typically, toString is used to describe things in a debug way. Displayable\nprovides a user-friendly representation of the object.",
            "author": "fray",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/interfaces/EwDisplayable.java",
            "line": 12,
            "description": "Returns the object in a user friendly format.",
            "return": {
                "description": "User readable string."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/interfaces/EwJsonSerializable.java",
            "line": 6,
            "description": "Allow an object to serialize into a JSON Object.",
            "author": "Fritz",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/interfaces/EwJsonSerializable.java",
            "line": 14,
            "description": "Returns the object serialized as a JSON Object.",
            "return": {
                "description": "Serialized Object"
            },
            "throws": {
                "description": "JSONException If the JSON object being constructed is malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 20,
            "description": "A class to extend {@link JSONArray} and implement {@link EwJsonCollection}.\nProvides the following features and functionality:\n<ul>\n<li>enhances all JSONArray behavior even when JSONArray methods are called\n</li>\n<li>processes complex array keys \"key[0][1]\" against nested JSON objects</li>\n<li>wraps incoming/outgoing {@link JSONArray}s as EwJsonArrays</li>\n<li>wraps incoming/outgoing {@link JSONObject}s as {@link EwJsonObject}s</li>\n</ul>\n<p>\nThis list can and should grow as Eduworks applications have need of new JSON\narray functionality.\n</p>",
            "author": "dharvey",
            "since": "September, 2011",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 61,
            "description": "Convert String or {@link JSONArray} to EwJsonArray, and put and return it\nif it is valid.",
            "params": [
                {
                    "name": "json",
                    "description": "The collection to get ref from, as a JSON Array."
                },
                {
                    "name": "ref",
                    "description": "The place to put the collection."
                }
            ],
            "return": {
                "description": "EwJsonArray found in ref."
            },
            "throws": {
                "description": "JSONException\n            if key is not found or value cannot be converted to\n",
                "type": "@link JSONArray"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 102,
            "description": "Merges values from an EwJsonCollection starting at the key/index\nspecified by ref if not null. If ref is null or non-numeric, all possible\nvalues in \"from\" are appended to the end of the array.",
            "params": [
                {
                    "name": "into",
                    "description": "Array to merge from into."
                },
                {
                    "name": "from",
                    "description": "Collection to merge into from."
                },
                {
                    "name": "ref",
                    "description": "Beginning key, ordered by god knows what."
                }
            ],
            "return": {
                "description": "Merged array."
            },
            "throws": {
                "description": "JSONException\n            If the data becomes malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 140,
            "see": [
                "#mergeFromString(JSONArray",
                "String",
                "Integer)"
            ],
            "params": [
                {
                    "name": "source",
                    "description": "String to attempt to parse."
                }
            ],
            "return": {
                "description": "a new  parsed from source string",
                "type": "@link EwJsonArray"
            },
            "throws": {
                "description": "JSONException\n            If the JSON parse is malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 153,
            "description": "Parse contents of json array String, and merge them with the array\nstarting at index. If array is null, an {@link EwJsonArray} is\ninstantiated from source and returned. If source is null the array is\nconverted to an {@link EwJsonArray} and returned. If index is null or\nnegative, the new array elements are appended to the end of the one\npassed in.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to merge into"
                },
                {
                    "name": "source",
                    "description": "Array to parse and merge"
                },
                {
                    "name": "index",
                    "description": "Index to start at"
                }
            ],
            "return": {
                "description": "JSON Array of results"
            },
            "throws": {
                "description": "JSONException\n            If the JSON parse is malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 234,
            "description": "If \"from\" is parsable as JSON, merge it with \"into\"; otherwise if ref and\nfrom are not null, put \"from\". Finally, return \"into\" as an EwJsonArray.",
            "see": [
                "EwJson#tryParseJson(Object",
                "boolean)",
                "#merge(EwJsonArray",
                "EwJsonCollection",
                "Object)"
            ],
            "params": [
                {
                    "name": "into",
                    "description": "Array to put parsed JSON into"
                },
                {
                    "name": "from",
                    "description": "String to parse"
                },
                {
                    "name": "ref",
                    "description": "Place to start parsing from?"
                }
            ],
            "return": {
                "description": "JSON Collection of results"
            },
            "throws": {
                "description": "JSONException\n            Malformed JSON in from."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 306,
            "description": "Initializes an array with the collections' values if it is a\n{@link EwJsonArray} or with the {@link EwJsonCollection} as the first\nelement in the array.",
            "params": [
                {
                    "name": "collection",
                    "description": "Collection to merge into the new collection."
                }
            ],
            "throws": {
                "description": "JSONException\n            Malformed collection."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 323,
            "description": "If source is JSONArray or array, merge; if JSONObject, convert to\nEwJsonObject and put; if String, try to parse and put; otherwise insert\nsource as first element in array.",
            "params": [
                {
                    "name": "source",
                    "description": "Object to attempt to use to populate this array."
                }
            ],
            "throws": {
                "description": "JSONException\n            Malformed object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 376,
            "description": "Calls {@link #opt(Object)} to parse any array keys.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 439,
            "description": "Overridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 455,
            "description": "Overridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 545,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 558,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 565,
            "description": "Parse string value as json and append values.",
            "see": [
                "EwJson#wrap(Object)"
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 576,
            "description": "Overridden to ensure complex keys are dereferenced by all getters. This\nmethod is what enables all gets and opts to parse array keys.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 586,
            "description": "Referenced by overridden {@link #opt(int)}, which is called throughout\nparent code.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 616,
            "return": {
                "description": "the value corresponding to \"ref\", or false if key/index does not\n        exist"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 639,
            "return": {
                "description": "the value corresponding to \"ref\", or  if\n        key/index does not exist",
                "type": "@link Double#NaN"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 662,
            "return": {
                "description": "the value corresponding to \"ref\", or false if key/index does not\n        exist"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 685,
            "description": "Overridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 695,
            "return": {
                "description": "the EwJsonArray corresponding to \"ref\", or null if key is not\n        valid"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 719,
            "description": "Overridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 729,
            "return": {
                "description": "the EwJsonObject corresponding to \"ref\", or null if key is not\n        valid"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 815,
            "description": "Overridden to avoid conversion of {@link Collection}s to\n{@link JSONArray}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 867,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 880,
            "description": "Insert a value at index (if ref can be converted to one) even if the\narray has to be extended (padded by null values).",
            "params": [
                {
                    "name": "ref",
                    "description": "an object to be converted to an array index"
                },
                {
                    "name": "value",
                    "description": "the value to be inserted"
                }
            ],
            "see": [
                "#put(int",
                "Object)"
            ],
            "return": {
                "description": "this object after insertion has been attempted"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 897,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 906,
            "description": "Overridden to first try wrapping as a valid JSON value. All index-based\nputs in parent call this method. All index-based puts also pad the\nunderlying {@link ArrayList} with null values when index is beyond the\ncurrent range of the array.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 925,
            "description": "Insert a value at index (if ref can be converted to one) even if the\narray has to be extended (padded by null values). If index is less than\nzero or value is null, nothing is done.",
            "params": [
                {
                    "name": "ref",
                    "description": "an object to be converted to an array index"
                },
                {
                    "name": "value",
                    "description": "a non-null value to be inserted"
                }
            ],
            "see": [
                "#put(int",
                "Object)"
            ],
            "return": {
                "description": "this object after insertion has been attempted"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 943,
            "description": "Insert a value at index (if ref can be converted to one) even if the\narray has to be extended (padded by null values). If the index already\nhas a value, a {@link JSONException} is thrown. If index is less than\nzero or value is null, nothing is done.",
            "params": [
                {
                    "name": "ref",
                    "description": "an object to be converted to an array index"
                },
                {
                    "name": "value",
                    "description": "a non-null, non-duplicate value to be inserted"
                }
            ],
            "see": [
                "#put(int",
                "Object)",
                "#put(Object",
                "Object)"
            ],
            "return": {
                "description": "this object after insertion has been attempted"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java",
            "line": 983,
            "description": "Compares this with object, after it has been wrapped by\n{@link EwJson#wrap(Object)}.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 22,
            "description": "A class to extend {@link JSONObject} and implement {@link EwJsonCollection}.\nProvides the following features and functionality:\n<ul>\n<li>enhances all JSONObject behavior even when JSONObject methods are called\n</li>\n<li>processes complex array keys \"key[0].key[next]\" against nested JSON\nobjects</li>\n<li>wraps incoming/outgoing {@link JSONArray}s as EwJsonArrays</li>\n<li>wraps incoming/outgoing {@link JSONObject}s as {@link EwJsonObject}s</li>\n</ul>\n<p>\nThis list can and should grow as Eduworks applications have need of new JSON\narray functionality.\n</p>",
            "author": "dharvey",
            "since": "September, 2011",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 65,
            "description": "Convert String or {@link JSONObject} to EwJsonObject, and put and return\nit if it is valid.",
            "params": [
                {
                    "name": "json",
                    "description": "Collection to get element from."
                },
                {
                    "name": "ref",
                    "description": "Location of element"
                }
            ],
            "return": {
                "description": "Element to return."
            },
            "throws": {
                "description": "JSONException\n            if key is not found or value cannot be converted to\n",
                "type": "@link JSONObject"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 106,
            "description": "Merges values from an {@link EwJsonCollection} to a {@link EwJsonObject}.\nIf \"ref\" is not null, merge \"from\" with any existing json value at \"ref\"\n-- a non-json value at \"ref\" will be overwritten. If \"from\" is an\n{@link EwJsonArray}, its values will be merged using the indices as keys.",
            "params": [
                {
                    "name": "into",
                    "description": "Object to merge from into."
                },
                {
                    "name": "from",
                    "description": "Collection to merge into from."
                },
                {
                    "name": "ref",
                    "description": "Beginning key, ordered by god knows what."
                }
            ],
            "return": {
                "description": "Merged object."
            },
            "throws": {
                "description": "JSONException\n            If the data becomes malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 155,
            "see": [
                "#mergeFromString(JSONObject",
                "String",
                "Object)"
            ],
            "params": [
                {
                    "name": "source",
                    "description": "String to attempt to parse."
                }
            ],
            "return": {
                "description": "a new  parsed from source string",
                "type": "@link EwJsonObject"
            },
            "throws": {
                "description": "JSONException\n            If the JSON parse is malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 168,
            "description": "Parse contents of json object String, and insert the new object at the\nspecified key (ref). If object is null, an {@link EwJsonObject} is\ninstantiated from source and returned. If source is null the object is\nconverted to an {@link EwJsonObject} and returned. If ref is null the new\nobject is merged with the the one passed in; otherwise the new object is\nmerged with anything existing at the key slot specified by ref.",
            "params": [
                {
                    "name": "object",
                    "description": "Object to merge into"
                },
                {
                    "name": "source",
                    "description": "Object to parse and merge"
                },
                {
                    "name": "ref",
                    "description": "Key to start at"
                }
            ],
            "return": {
                "description": "JSON Object of results"
            },
            "throws": {
                "description": "JSONException\n            If the JSON parse is malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 274,
            "description": "If \"from\" is parsable as JSON, merge it with \"into\"; otherwise if ref and\nfrom are not null, put or merge with \"from\". Finally, return \"into\" as an\nEwJsonObject.",
            "see": [
                "EwJson#tryParseJson(Object",
                "boolean)",
                "EwJsonObject#merge(EwJsonObject",
                "EwJsonCollection",
                "Object)"
            ],
            "params": [
                {
                    "name": "into",
                    "description": "Object to put parsed JSON into"
                },
                {
                    "name": "from",
                    "description": "String to parse"
                },
                {
                    "name": "ref",
                    "description": "Place to start parsing from?"
                }
            ],
            "return": {
                "description": "JSON Collection of results"
            },
            "throws": {
                "description": "JSONException\n            Malformed JSON in from."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 369,
            "description": "Attempt to merge any object with this.",
            "see": [
                "#merge(Object)"
            ],
            "params": [
                {
                    "name": "source",
                    "description": "Object to attempt to use to populate this array."
                }
            ],
            "throws": {
                "description": "JSONException\n            Malformed object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 399,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 471,
            "description": "Overridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 494,
            "description": "Overridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 553,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 571,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 587,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 600,
            "description": "Iterates over sorted keys and inserts separators between corresponding\nvalues",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 652,
            "description": "Overridden to ensure complex keys are dereferenced by all getters. This\nmethod is what enables all gets and opts to parse complex keys.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 662,
            "description": "Referenced by overridden {@link #opt(String)}, which is called throughout\nparent code.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 672,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 698,
            "return": {
                "description": "the boolean value corresponding to \"ref\", or false if key does\n        not exist or is not a String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 717,
            "return": {
                "description": "the value corresponding to \"ref\", or  if key\n        does not exist or is not a String",
                "type": "@link Double#NaN"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 736,
            "return": {
                "description": "the value corresponding to \"ref\", or zero if key does not exist\n        or is not a String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 755,
            "description": "Overridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 765,
            "return": {
                "description": "the EwJsonArray corresponding to \"ref\", or null if key does not\n        exist or is not a String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 789,
            "description": "Overridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 799,
            "return": {
                "description": "the EwJsonObject corresponding to \"ref\", or null if key does not\n        exist or is not a String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 835,
            "return": {
                "description": "the value corresponding to \"ref\", or zero if key does not exist\n        or is not a String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 854,
            "return": {
                "description": "the value corresponding to \"ref\", or the empty string if key does\n        not exist or is not a String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 879,
            "description": "Overridden to avoid conversion of {@link Collection}s to\n{@link JSONArray}s",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 889,
            "description": "Inserts a {@link JSONArray} created from the {@link Collection} at the\nspecified key.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 917,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 930,
            "description": "Overridden to first try parsing value as an EwJsonCollection. All puts\nexecuted in the parent call this method. Null values result in the\nremoval of any existing value at key.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 950,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 960,
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 1012,
            "description": "Compares this with object, after it has been wrapped by\n{@link EwJson#wrap(Object)}.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java",
            "line": 1064,
            "description": "Joins next key and value, and returns the key -- does not check nulls or\nif keys has next",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 16,
            "description": "Defines a common API for classes extending members of the org.json library,\nsuch that the underlying functionality can be manipulated as an\nEwJsonCollection.\n\nProvides these basic features and functionality (see implementations for\nspecifics):\n<ul>\n<li>an extensible API of customized JSON functionality</li>\n<li>an API for converting or merging common classes into JSON</li>\n<li>an API for encoding and decoding string values</li>\n</ul>\nKnown implementations:\n<ul>\n<li>{@link EwJsonArray}</li>\n<li>{@link EwJsonObject}</li>\n</ul>",
            "author": "dharvey",
            "since": "September, 2011",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 41,
            "description": "Accumulate values under a key as a JSONArray.",
            "params": [
                {
                    "name": "ref",
                    "description": "Object to use as a key."
                },
                {
                    "name": "value",
                    "description": "Object to use as a value."
                }
            ],
            "return": {
                "description": "This collection."
            },
            "throws": {
                "description": "JSONException\n            If the JSON becomes malformed due to the values."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 54,
            "description": "True IFF the collection contains element.",
            "params": [
                {
                    "name": "element",
                    "description": "The element to test for."
                }
            ],
            "return": {
                "description": "true if the object is stored as a value in the collection"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 85,
            "description": "Returns a newly instantiated {@link EwJsonCollection} of the same type as\nthis one.",
            "return": {
                "description": "A newly instantiated  of the same type as\n        this one",
                "type": "@link EwJsonCollection"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 94,
            "description": "Checks for presence of a value corresponding to either a simple or\ncomplex key/index in the collection.",
            "params": [
                {
                    "name": "ref",
                    "description": "Dot/Bracket Notated Complex String."
                }
            ],
            "return": {
                "description": "True IFF the value was found."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 104,
            "description": "Checks for presence of a value corresponding to a non-complex key/index\nin the collection.",
            "params": [
                {
                    "name": "ref",
                    "description": "Key to use to find the object."
                }
            ],
            "return": {
                "description": "True IFF the value was found."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 120,
            "description": "Measure the number of items in the collection.",
            "return": {
                "description": "the number of keys or indices stored in this collection."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 127,
            "description": "Copy everything from the incoming collection to this one. Overwrites\nexisting values.",
            "params": [
                {
                    "name": "value",
                    "description": "Other collection."
                }
            ],
            "return": {
                "description": "This collection with additional values."
            },
            "throws": {
                "description": "JSONException\n            If objects from the other collection malformed this\n            collection."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 140,
            "description": "Attempt to parse value as json and merge values; if not parsable, do\nnothing.",
            "params": [
                {
                    "name": "value",
                    "description": "Other value, assumed to be JSON."
                }
            ],
            "return": {
                "description": "This, with additional values."
            },
            "throws": {
                "description": "JSONException\n            If objects from the other collection malformed this\n            collection."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 207,
            "description": "Reduce collections to the single element they contain if possible, but\nleave the original object unchanged.",
            "return": {
                "description": "the reduced value, but leave this instance unchanged"
            },
            "see": [
                "EwJson#reduce(Object)"
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 216,
            "description": "Decode a String value at ref using URL encoding.",
            "params": [
                {
                    "name": "ref",
                    "description": "The key to look up."
                }
            ],
            "return": {
                "description": "The URL decoded value."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java",
            "line": 225,
            "description": "Encode a String value at ref for the URL.",
            "params": [
                {
                    "name": "ref",
                    "description": "The key to look up."
                }
            ],
            "return": {
                "description": "The URL encoded value."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java",
            "line": 7,
            "description": "Defines a basic, Eduworks JSON entity. Provides an API for methods that all\nJSON based entities tend to have even though they are not related.",
            "author": "dharvey",
            "since": "September, 2011",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java",
            "line": 17,
            "description": "Pretty prints the string.",
            "params": [
                {
                    "name": "indentFactor",
                    "description": "Indentation in spaces."
                }
            ],
            "return": {
                "description": "pretty-printed JSON text of this JSON."
            },
            "throws": {
                "description": "JSONException\n            If the JSON is malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java",
            "line": 28,
            "description": "Write the contents of the JSON as text to a writer.",
            "params": [
                {
                    "name": "writer",
                    "description": "Writer to write to."
                }
            ],
            "return": {
                "description": "The writer we wrote to."
            },
            "throws": {
                "description": "JSONException If the JSON generated becomes malformed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 25,
            "description": "Provides general helper methods for {@link JSONArray} and {@link JSONObject}.\nWhen methods deal in specific {@link EwJsonCollection}s, they should be put\nin their respective classes. This class is reserved specifically for the\nbasic classes in org.json.*.",
            "author": "dharvey",
            "since": "September, 2011",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 159,
            "description": "Recurses over coll, and adds all nested non-null, non-json elements.",
            "params": [
                {
                    "name": "coll",
                    "description": "Collection to recurse over."
                }
            ],
            "return": {
                "description": "Set of all elements."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 208,
            "description": "Recurses over coll, and adds any nested non-null, non-json elements at\nkey regardless of depth",
            "params": [
                {
                    "name": "coll",
                    "description": "Collection to recurse over."
                },
                {
                    "name": "key",
                    "description": "Key to use to dive in."
                }
            ],
            "return": {
                "description": "Set of elements."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 654,
            "description": "Casts object as {@link JSONArray} if it is an instance of one, or parses\na {@link JSONArray} from object if it is a String.",
            "params": [
                {
                    "name": "object",
                    "description": "the object to convert to a JSONArray"
                }
            ],
            "return": {
                "description": "a JSONArray object if it can be converted, or null"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 679,
            "description": "Casts object as {@link JSONObject} if it is an instance of one, or parses\na {@link JSONObject} from object if it is a String.",
            "params": [
                {
                    "name": "object",
                    "description": "the object to convert to a JSONObject"
                }
            ],
            "return": {
                "description": "a JSONObject object if it can be converted, or null"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 810,
            "description": "Throw an exception if the object is a NaN or infinite number. Roughly\nequivalent to {@link JSONObject#testValidity(Object)}.",
            "params": [
                {
                    "name": "object",
                    "description": "the object to test"
                }
            ],
            "return": {
                "description": "true if object is a non-finite number, false otherwise"
            },
            "throws": {
                "description": "JSONException Malformed object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 1112,
            "description": "Ensure primitive values are wrapped as Objects and strings are parsed as\nJSON if possible. If \"convert\" is specified, Collections/Maps are\nconverted to {@link EwJsonCollection}s, or if the string value of the\nobject is not parsable as json, a new EwJsonObject is created and\npopulated from the object as though it were a \"bean\" (getters to keys",
            "see": [
                "#tryParseJson(Object",
                "boolean)",
                "#populateMap(JSONObject",
                "Object)"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "Object to wrap."
                },
                {
                    "name": "convert",
                    "description": "Convert to a JSON type."
                }
            ],
            "return": {
                "description": "Wrapped object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 1289,
            "description": "Deep copies all JSON elements, shallow copies anything else.",
            "params": [
                {
                    "name": "cl",
                    "description": "Object to clone."
                }
            ],
            "return": {
                "description": "Cloned object."
            },
            "throws": {
                "description": "JSONException Malformed object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/util/EwJson.java",
            "line": 1316,
            "description": "Deep copies all JSON elements, shallow copies anything else.",
            "params": [
                {
                    "name": "ar",
                    "description": "Array to clone."
                }
            ],
            "return": {
                "description": "Cloned array."
            },
            "throws": {
                "description": "JSONException Malformed object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java",
            "line": 13,
            "description": "A map to be used to cache objects. Objects may vanish at any point based on\nmemory available and garbage collection.",
            "author": "Fritz",
            "params": [
                {
                    "name": "<E>",
                    "description": "Key type"
                },
                {
                    "name": "<T>",
                    "description": "Value type"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java",
            "line": 37,
            "description": "Removes all dangling soft references.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java",
            "line": 93,
            "description": "Returns the inner object of a soft reference, if it exists and is not\nnull.",
            "params": [
                {
                    "name": "arg0",
                    "description": "The key object"
                }
            ],
            "return": {
                "description": "The value object"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwFactory.java",
            "line": 3,
            "description": "Simple factory class.",
            "author": "Fritz",
            "params": [
                {
                    "name": "<W>",
                    "description": "Type to create."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwFactory.java",
            "line": 13,
            "description": "Create a new object and return it.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the object."
                }
            ],
            "return": {
                "description": "The new object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwHashMap.java",
            "line": 6,
            "description": "Helper methods appended to a HashMap.",
            "author": "Fritz",
            "params": [
                {
                    "name": "<E>",
                    "description": "Key type"
                },
                {
                    "name": "<T>",
                    "description": "Value type"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwHashSet.java",
            "line": 11,
            "description": "Helper methods on HashSet",
            "author": "Fritz",
            "params": [
                {
                    "name": "<E>",
                    "description": "Set type"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwHashSet.java",
            "line": 60,
            "description": "Returns true IFF any value in coll is found in this set.",
            "params": [
                {
                    "name": "coll",
                    "description": "The collection to test against."
                }
            ],
            "return": {
                "description": "If the collection contains any element in coll."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwList.java",
            "line": 18,
            "description": "Helper methods attached on top of ArrayList.",
            "author": "Fritz",
            "params": [
                {
                    "name": "<E>",
                    "description": "List type"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwList.java",
            "line": 115,
            "description": "Returns true IFF this list contains an element in c, uses\n{@link #contains(Object)}",
            "params": [
                {
                    "name": "c",
                    "description": "Other collection."
                }
            ],
            "return": {
                "description": "If any element in c is contained in this list."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwList.java",
            "line": 131,
            "description": "Returns true IFF this list contains an element in c, uses\n{@link #contains(Object, Comparator)}",
            "params": [
                {
                    "name": "c",
                    "description": "Other collection."
                },
                {
                    "name": "comparator",
                    "description": "Comparator to compare this and c."
                }
            ],
            "return": {
                "description": "If any element in c is contained in this list according to the comparator."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwList.java",
            "line": 148,
            "description": "Returns true IFF this list contains an element in c, uses\n{@link #contains(Object)}",
            "params": [
                {
                    "name": "c",
                    "description": "Other array."
                }
            ],
            "return": {
                "description": "If any element in c is contained in this list."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwList.java",
            "line": 163,
            "description": "Returns true IFF this list contains an element who's toString() is\nString.equals(str)",
            "params": [
                {
                    "name": "str",
                    "description": "String to use in comparison."
                }
            ],
            "return": {
                "description": "If any element in this list, when passed through toString(), equals str."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwText.java",
            "line": 3,
            "description": "Represents a string with positional information about where it appears within\na tokenized series of strings.",
            "author": "mhald",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/lang/EwTextSpan.java",
            "line": 6,
            "description": "An text span contains text that includes more than one words and therefore\nspans a series of positions within a sentence.",
            "author": "mhald",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/io/EwFileSystem.java",
            "line": 326,
            "description": "Close a stream or reader/writer object.",
            "params": [
                {
                    "name": "stream",
                    "description": "Stream to close."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/io/EwFileSystem.java",
            "line": 350,
            "description": "Download the content of a URL to a specific local file or a temporary\nfile if no local file is specified. Returns the local file used.",
            "params": [
                {
                    "name": "path",
                    "description": "URL to download."
                },
                {
                    "name": "localFile",
                    "description": "To this local file."
                },
                {
                    "name": "timeout",
                    "description": "Timeout for download."
                }
            ],
            "return": {
                "description": "Downloaded file or null."
            },
            "throws": {
                "description": "IOException Error in downloading or writing file."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 5,
            "description": "Utility class designed to hold a pair of typed objects. Useful for creating\nlists of pairs or for returning two values from a function.\n\nNote that this is a TUple, not a more general N-Tuple (though you can use an\narray of Object to get pretty close). ThreeTuple, FourTuple, and such can be\nwritten as needed.\n\nThis class is technically comparable, but this works only if the first\nelement is of a comparable type. If you try otherwise it returns a\nUnsupportedOperationException. You can test if it's comparable using:\n\nmyTuple.getKey() instanceof Comparable",
            "author": "Tom Wrensch",
            "params": [
                {
                    "name": "<T>",
                    "description": "Type of the first object"
                },
                {
                    "name": "<S>",
                    "description": "Type of the second object"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 31,
            "description": "Constructor. Note that this object is not mutable, so the two values MUST\nbe set in the constructor.",
            "params": [
                {
                    "name": "first",
                    "description": "first object"
                },
                {
                    "name": "second",
                    "description": "second object"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 46,
            "return": {
                "description": "the first object in the tuple"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 54,
            "return": {
                "description": "the second object in the tuple"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 62,
            "description": "Returns the hash code. Has to match the way equals() works.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 70,
            "description": "Return true if the given object represents the same information as\nmyself. True only if it is a tuple and the first and second items are\nequal to the first and second items in the original.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 93,
            "description": "Return a humnan-readable representation of myself.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/util/Tuple.java",
            "line": 101,
            "description": "Compare with another tuple. This works only if the first (T) type is a\ncomparable, otherwise it throws an exception.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/EwVersion.java",
            "line": 9,
            "description": "Helper class to get the version number from the version file.",
            "author": "fray",
            "class": "CruncherCache"
        },
        {
            "file": "ew.common/src/main/java/com/eduworks/EwVersion.java",
            "line": 17,
            "description": "Gets the version from the version file.",
            "return": {
                "description": "Version String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/util/JSONUtils.java",
            "line": 32,
            "description": "Couch specific JSON utility. For more general JSON utility see {@link EwJson}",
            "author": "Ilya Sterin",
            "version": "1.0",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/AdHocView.java",
            "line": 19,
            "description": "Creates an AdHoc view... this basically just creates a new View with a name\nof \"_temp_view\" and a defined function.",
            "author": "mbreese",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 44,
            "description": "The CouchResponse parses the HTTP response returned by the CouchDB server.\nThis is almost never called directly by the user, but indirectly through the\nSession and Database objects.\n<p>\nGiven a CouchDB response, it will determine if the request was successful\n(status 200,201,202), or was an error. If there was an error, it parses the\nreturned json error message.",
            "author": "mbreese",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 70,
            "description": "C-tor parses the method results to build the CouchResponse object. First,\nit reads the body (hence the IOException) from the method Next, it checks\nthe status codes to determine if the request was successful. If there was\nan error, it parses the error codes.",
            "params": [
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 178,
            "description": "A better toString for this object... can be very verbose though.",
            "return": {
                "description": "String form of this object."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 187,
            "description": "Retrieves the body of the request as a JSONArray object. (such as listing\ndatabase names)",
            "return": {
                "description": "Body of the request."
            },
            "throws": {
                "description": "JSONException Malformed parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 201,
            "description": "Was the request successful?",
            "return": {
                "description": "Is Ok."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 211,
            "description": "What was the error id?",
            "return": {
                "description": "Error ID."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 225,
            "description": "what was the error reason given?",
            "return": {
                "description": "Error Reason."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 239,
            "description": "Returns the body of the response as a JSON Object (such as for a\ndocument)",
            "return": {
                "description": "Body of the response as a JSON object."
            },
            "throws": {
                "description": "JSONException Malformed JSON."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java",
            "line": 255,
            "description": "Retrieves a specific header from the response (not really used anymore)",
            "params": [
                {
                    "name": "key",
                    "description": "Key into the header of the HTTP request."
                }
            ],
            "return": {
                "description": "Header of the HTTP request."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 38,
            "description": "This represents a particular database on the CouchDB server\n\nUsing this object, you can get/create/update/delete documents. You can also\ncall views (named and adhoc) to query the underlying database.",
            "author": "mbreese",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 58,
            "description": "C-tor only used by the Session object. You'd never call this directly.",
            "params": [
                {
                    "name": "json",
                    "description": ""
                },
                {
                    "name": "session",
                    "description": ""
                }
            ],
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 74,
            "description": "The name of the database",
            "return": {
                "description": "Name of the database."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 84,
            "description": "The number of documents in the database <b>at the time that it was\nretrieved from the session</b> This number probably isn't accurate after\nthe initial load... so if you want an accurate assessment, call\nSession.getDatabase() again to reload a new database object.",
            "return": {
                "description": "Document count."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 97,
            "description": "The update seq from the initial database load. The update sequence is the\n'revision id' of an entire database. Useful for getting all documents in\na database since a certain revision",
            "return": {
                "description": "Update sequence."
            },
            "see": [
                "#getAllDocuments()"
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 110,
            "description": "Runs the standard \"_all_docs\" view on this database",
            "return": {
                "description": "ViewResults - the results of the view... this can be iterated\n        over to get each document."
            },
            "throws": {
                "description": "JSONException Malformed Parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 122,
            "description": "Gets all design documents",
            "return": {
                "description": "ViewResults - all design docs"
            },
            "throws": {
                "description": "JSONException Malformed Parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 137,
            "description": "Runs the standard \"_all_docs\" view on this database, with count",
            "params": [
                {
                    "name": "count",
                    "description": "Number of documents to return."
                }
            ],
            "return": {
                "description": "ViewResults - the results of the view... this can be iterated\n        over to get each document."
            },
            "throws": {
                "description": "JSONException Malformed Parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 195,
            "description": "Runs \"_all_docs_by_update_seq?startkey=revision\" view on this database",
            "params": [
                {
                    "name": "revision",
                    "description": "Start document."
                }
            ],
            "return": {
                "description": "ViewResults - the results of the view... this can be iterated\n        over to get each document."
            },
            "throws": {
                "description": "JSONException Malformed Parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 208,
            "description": "Runs a named view on the database This will run a view and apply any\nfiltering that is requested (reverse, startkey, etc).",
            "params": [
                {
                    "name": "view",
                    "description": "View to run on the database."
                }
            ],
            "return": {
                "description": "View Results."
            },
            "throws": {
                "description": "JSONException Malformed Parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 221,
            "description": "Runs a view, appending \"_view\" to the request if isPermanentView is true.\n*",
            "params": [
                {
                    "name": "view",
                    "description": "View to run on the database."
                },
                {
                    "name": "isPermanentView",
                    "description": "Whether to make the view permanent."
                }
            ],
            "return": {
                "description": "View Results"
            },
            "throws": {
                "description": "JSONException Malformed Parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 256,
            "description": "Runs a named view <i>Not currently working in CouchDB code</i>",
            "params": [
                {
                    "name": "fullname",
                    "description": "- the fullname (including the document name) ex:\n           foodoc:viewname"
                },
                {
                    "name": "stale",
                    "description": "Set the view to stale or up-to-date."
                }
            ],
            "return": {
                "description": "View Results"
            },
            "throws": {
                "description": "JSONException Malformed Parse."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 309,
            "description": "Runs an ad-hoc view from a string",
            "params": [
                {
                    "name": "function",
                    "description": "- the Javascript function to use as the filter."
                }
            ],
            "return": {
                "description": "results"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 321,
            "description": "Runs an ad-hoc view from an AdHocView object. You probably won't use this\nmuch, unless you want to add filtering to the view (reverse, startkey,\netc...)",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 345,
            "description": "Save a document at the given _id\n\nif the docId is null or empty, then this performs a POST to the database\nand retrieves a new _id.\n\nOtherwise, a PUT is called.\n\nEither way, a new _id and _rev are retrieved and updated in the Document\nobject",
            "params": [
                {
                    "name": "doc",
                    "description": "Document to save."
                },
                {
                    "name": "docId",
                    "description": "Document Id to save it under"
                }
            ],
            "throws": {
                "description": "IOException HTTP error"
            },
            "return": {
                "description": "True if document saved."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 412,
            "description": "Save a document w/o specifying an id (can be null)",
            "params": [
                {
                    "name": "doc",
                    "description": "Document to save to database."
                }
            ],
            "return": {
                "description": "Whether the document was saved or not."
            },
            "throws": {
                "description": "JSONException Encoding issues."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 542,
            "description": "Retrieves a document from the CouchDB database",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the document"
                }
            ],
            "return": {
                "description": "Document retreived from database"
            },
            "throws": {
                "description": "IOException HTTP issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 555,
            "description": "Retrieves a document from the database and asks for a list of it's\nrevisions. The list of revision keys can be retrieved from\nDocument.getRevisions();",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the document"
                }
            ],
            "return": {
                "description": "Document (with revisions)"
            },
            "throws": {
                "description": "IOException HTTP issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 570,
            "description": "Retrieves a specific document revision",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the document"
                },
                {
                    "name": "revision",
                    "description": "Revision of the document"
                }
            ],
            "return": {
                "description": "Document (with revisions)"
            },
            "throws": {
                "description": "IOException HTTP issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 584,
            "description": "Retrieves a specific document revision and (optionally) asks for a list\nof all revisions",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the document"
                },
                {
                    "name": "revision",
                    "description": "Revision of the document"
                },
                {
                    "name": "showRevisions",
                    "description": "Whether to include revisions"
                }
            ],
            "return": {
                "description": "Document (with revisions if showRevisions)"
            },
            "throws": {
                "description": "IOException HTTP issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 646,
            "description": "Deletes a document",
            "params": [
                {
                    "name": "d",
                    "description": "Document to delete."
                }
            ],
            "return": {
                "description": "was the delete successful?"
            },
            "throws": {
                "description": "IllegalArgumentException\n            for blank document id"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 684,
            "description": "Gets attachment",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the attachment"
                },
                {
                    "name": "attachment",
                    "description": "attachment body"
                }
            ],
            "return": {
                "description": "attachment body"
            },
            "throws": {
                "description": "IOException HTTP issues."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java",
            "line": 700,
            "description": "Puts attachment to the doc",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the attachment"
                },
                {
                    "name": "fname",
                    "description": "attachment name"
                },
                {
                    "name": "ctype",
                    "description": "content type"
                },
                {
                    "name": "attachment",
                    "description": "attachment body"
                }
            ],
            "return": {
                "description": "was the delete successful?"
            },
            "throws": {
                "description": "IOException HTTP issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 34,
            "description": "Everything in CouchDB is a Document. In this case, the document is an object\nbacked by a JSONObject. The Document is also aware of the database that it is\nconnected to. This allows the Document to reload it's properties when needed.\nThe only special fields are \"_id\", \"_rev\", \"_revisions\", and \"_view_*\".\n<p>\nAll document have an _id and a _rev. If this is a new document those fields\nare populated when they are saved to the CouchDB server.\n<p>\n_revisions is only populated if the document has been retrieved via\ndatabase.getDocumentWithRevisions(); So, if this document wasn't, then when\nyou call document.getRevisions(), it will go back to the server to reload\nitself via database.getDocumentWithRevisions().\n<p>\nThe Document can be treated like a JSONObject, eventhough it doesn't extend\nJSONObject (it's final).\n<p>\nYou can also get/set values by calling document.get(key),\ndocument.put(key,value), just like a Map.\n<p>\nYou can get a handle on the backing JSONObject by calling\ndocument.getJSONObject(); If this hasn't been loaded yet, it will load the\ndata itself using the given database connection.\n<p>\nIf you got this Document from a view, you are likely missing elements. To\nload them you can call document.load().",
            "author": "mbreese",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 76,
            "description": "Create a new Document",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 85,
            "description": "Create a new Document from a JSONObject",
            "params": [
                {
                    "name": "obj",
                    "description": "JSON object to convert into a document"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 96,
            "description": "Load data into this document from a differing JSONObject\n<p>\nThis is mainly for reloading data for an object that was retrieved from a\nview. This version doesn't overwrite any unsaved data that is currently\npresent in this object.",
            "params": [
                {
                    "name": "object2",
                    "description": ""
                }
            ],
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 120,
            "description": "This document's id (if saved)",
            "return": {
                "description": "ID of the document (with subpath)"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 142,
            "description": "This strips _design from the document id",
            "return": {
                "description": "ID of the view (without the preamble path)"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 160,
            "description": "This document's Revision (if saved)",
            "return": {
                "description": "Revision of the document"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 185,
            "description": "A list of the revision numbers that this document has. If this hasn't\nbeen populated with a \"full=true\" query, then the database will be\nre-queried",
            "return": {
                "description": "Array of revisions of the document."
            },
            "throws": {
                "description": "JSONException JSON formatting issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 214,
            "description": "Get a named view that is stored in the document.",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the view"
                }
            ],
            "return": {
                "description": "View object"
            },
            "throws": {
                "description": "JSONException JSON formatting issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 234,
            "description": "Add a view to this document. If a view function already exists with the\ngiven viewName it is overwritten.\n<p>\nThis isn't persisted until the document is saved.",
            "params": [
                {
                    "name": "designDoc",
                    "description": "document name"
                },
                {
                    "name": "viewName",
                    "description": "Name of the view"
                },
                {
                    "name": "function",
                    "description": "Name of the function to store the view in"
                }
            ],
            "return": {
                "description": "View created by the action"
            },
            "throws": {
                "description": "JSONException JSON formatting exception"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 270,
            "description": "Removes a view from this document.\n<p>\nThis isn't persisted until the document is saved.",
            "params": [
                {
                    "name": "viewName",
                    "description": "Name of the view."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 287,
            "description": "Loads data from the server for this document. Actually requests a new\ncopy of data from the server and uses that to populate this document.\nThis doesn't overwrite any unsaved data.",
            "throws": {
                "description": "IOException HTTP issues."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java",
            "line": 317,
            "description": "Retrieves the backing JSONObject",
            "return": {
                "description": "Backing JSON object."
            },
            "throws": {
                "description": "JSONException JSON formatting issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 75,
            "description": "The Session is the main connection to the CouchDB instance. However, you'll\nonly use the Session to obtain a reference to a CouchDB Database. All of the\nmain work happens at the Database level.\n<p>\nIt uses the Apache's HttpClient library for all communication with the\nserver. This is a little more robust than the standard URLConnection.\n<p>\nEx usage: <br>\nSession session = new Session(host,port); Database db =\nsession.getDatabase(\"dbname\");",
            "author": "brennanjubb - HTTP-Auth username/pass",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 143,
            "description": "Constructor for obtaining a Session with an HTTP-AUTH username/password\nand (optionally) a secure connection This isn't supported by CouchDB -\nyou need a proxy in front to use this",
            "params": [
                {
                    "name": "host",
                    "description": "- hostname"
                },
                {
                    "name": "port",
                    "description": "- port to use"
                },
                {
                    "name": "user",
                    "description": "- username"
                },
                {
                    "name": "pass",
                    "description": "- password"
                },
                {
                    "name": "usesAuth",
                    "description": "Uses basic auth?"
                },
                {
                    "name": "secure",
                    "description": "- use an SSL connection?"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 206,
            "description": "Constructor for obtaining a Session with an HTTP-AUTH username/password\nThis isn't supported by CouchDB - you need a proxy in front to use this",
            "params": [
                {
                    "name": "host",
                    "description": "Host or IP of the remote machine"
                },
                {
                    "name": "port",
                    "description": "Port of the remote machine"
                },
                {
                    "name": "user",
                    "description": "- username"
                },
                {
                    "name": "pass",
                    "description": "- password"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 224,
            "description": "Main constructor for obtaining a Session.",
            "params": [
                {
                    "name": "host",
                    "description": "Hostname or IP of the server"
                },
                {
                    "name": "port",
                    "description": "Port to access"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 237,
            "description": "Optional constructor that indicates an HTTPS connection should be used.\nThis isn't supported by CouchDB - you need a proxy in front to use this",
            "params": [
                {
                    "name": "host",
                    "description": "Hostname or IO of the server"
                },
                {
                    "name": "port",
                    "description": "Port to access"
                },
                {
                    "name": "secure",
                    "description": "Whether the connection is secure (HTTPS)"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 253,
            "description": "Read-only",
            "return": {
                "description": "the host name"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 263,
            "description": "read-only",
            "return": {
                "description": "the port"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 273,
            "description": "Is this a secured connection (set in constructor)",
            "return": {
                "description": "True if secured."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 283,
            "description": "Retrieves a list of all database names from the server",
            "return": {
                "description": "List of database names."
            },
            "throws": {
                "description": "JSONException\n            JSON formatting issues."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 303,
            "description": "Loads a database instance from the server",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the database."
                }
            ],
            "return": {
                "description": "the database (or null if it doesn't exist)"
            },
            "throws": {
                "description": "JSONException\n            JSON formatting issues."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 326,
            "description": "Creates a new database (if the name doesn't already exist)",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the database."
                }
            ],
            "return": {
                "description": "the new database (or null if there was an error)"
            },
            "throws": {
                "description": "JSONException\n            JSON formatting issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 354,
            "description": "Deletes a database (by name) from the CouchDB server.",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the database"
                }
            ],
            "return": {
                "description": "true = successful, false = an error occurred (likely the database\n        named didn't exist)"
            },
            "throws": {
                "description": "JSONException\n            JSON formatting issues."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 369,
            "description": "Deletes a database from the CouchDB server",
            "params": [
                {
                    "name": "db",
                    "description": "Database to delete"
                }
            ],
            "return": {
                "description": "was successful"
            },
            "throws": {
                "description": "JSONException\n            JSON formatting issues"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 383,
            "description": "For a given url (such as /_all_dbs/), build the database connection url",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": "the absolute URL (hostname/port/etc)"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 417,
            "description": "Package level access to send a DELETE request to the given URL",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 430,
            "description": "Send a POST with no body / parameters",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 442,
            "description": "Send a POST with body",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 455,
            "description": "Send a POST with a body and query string",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "queryString",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 485,
            "description": "Send a PUT (for creating databases)",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 497,
            "description": "Send a PUT with a body (for creating documents)",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 525,
            "description": "Overloaded Put using by attachments",
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 554,
            "description": "Send a GET request",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 573,
            "description": "Send a GET request with a number of name/value pairs as a query string",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 587,
            "description": "Send a GET request with a queryString (?foo=bar)",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "queryString",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java",
            "line": 601,
            "description": "Method that actually performs the GET/PUT/POST/DELETE calls. Executes the\ngiven HttpMethod on the HttpClient object (one HttpClient per Session).\n<p>\nThis returns a CouchResponse, which can be used to get the status of the\ncall (isOk), and any headers / body that was sent back.",
            "params": [
                {
                    "name": "req",
                    "description": ""
                }
            ],
            "return": {
                "description": "the CouchResponse (status / error / json document)"
            },
            "throws": {
                "description": "JSONException"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 22,
            "description": "The View is the mechanism for performing Querys on a CouchDB instance. The\nview can be named or ad-hoc (see AdHocView). (Currently [14 Sept 2007] named\nview aren't working in the mainline CouchDB code... but this _should_ work.)\n<p>\nThe View object exists mainly to apply filtering to the view. Otherwise,\nviews can be called directly from the database object by using their names\n(or given an ad-hoc query).",
            "author": "mbreese",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 50,
            "description": "Build a view given a document and a name",
            "params": [
                {
                    "name": "doc",
                    "description": "Document to use to create a view."
                },
                {
                    "name": "name",
                    "description": "Name of the view"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 62,
            "description": "Build a view given only a fullname ex: (\"_add_docs\", \"_temp_view\")",
            "params": [
                {
                    "name": "fullname",
                    "description": "Full name of the view (no document)"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 73,
            "description": "Builds a new view for a document, a given name, and the function\ndefinition. This <i>does not actually add it to the document</i>. That is\nhandled by Document.addView()\n<p>\nThis constructor should only be called by Document.addView();",
            "params": [
                {
                    "name": "doc",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "function",
                    "description": ""
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 91,
            "description": "Based upon settings, builds the queryString to add to the URL for this\nview.",
            "return": {
                "description": "Query String"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 163,
            "description": "The number of entries to return",
            "params": [
                {
                    "name": "count",
                    "description": "number of items."
                }
            ],
            "deprecated": true,
            "deprecationMessage": "CouchDB 0.9 uses limit instead",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 190,
            "description": "Stop listing at this key",
            "params": [
                {
                    "name": "endKey",
                    "description": "End key."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 200,
            "description": "Reverse the listing",
            "params": [
                {
                    "name": "reverse",
                    "description": "Reverse the listing."
                }
            ],
            "deprecated": true,
            "deprecationMessage": "CouchDB 0.9 uses \"descending\" instead",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 216,
            "description": "Skip listing these keys (not sure if this works, or the format)",
            "params": [
                {
                    "name": "skip",
                    "description": "Whether to skip."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 226,
            "description": "Start listing at this key",
            "params": [
                {
                    "name": "startKey",
                    "description": "The Start Key"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 236,
            "description": "Not sure... might be for batch updates, but not sure.",
            "params": [
                {
                    "name": "update",
                    "description": "whether to update"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 256,
            "description": "The name for this view (w/o doc id)",
            "return": {
                "description": "Name of the view."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 266,
            "description": "the full name for this view (w/ doc id, if avail) in the form of :\n\"docid:name\" or \"name\"",
            "return": {
                "description": "Name of the view."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java",
            "line": 277,
            "description": "The function definition for this view, if it is available.",
            "return": {
                "description": "Function definition of the view."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java",
            "line": 28,
            "description": "The results of a view request is just a specialized Document object.\nYou can use ViewResults to retrieve information about the results (such as the \nnumber of rows returned).\n<p>\nThe ViewResults document contains a JSONArray named \"rows\".  This JSON array contains\nfurther sub-Documents.  These documents include the _id and _rev of the matched Documents as\nwell as any other fields that the View function returns -- it is not the full Document.\n<p>\nIn order to retrieve the full document, you must call database.getDocument(id).",
            "author": "mbreese",
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java",
            "line": 46,
            "description": "Builds the ViewResults object from the given JSON object. (called only from Database.view())\nThis shouldn't be called by user code.",
            "params": [
                {
                    "name": "calledView",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java",
            "line": 57,
            "description": "Retrieves a list of documents that matched this View.\nThese documents only contain the data that the View has returned (not the full document).\n<p>\nYou can load the remaining information from Document.reload();",
            "return": {
                "description": "List of Document objects."
            },
            "throws": {
                "description": "JSONException JSON Formatting Exception"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java",
            "line": 81,
            "description": "The new that created this results list.",
            "return": {
                "description": "View object"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 12,
            "description": "Class AnimatedGifEncoder - Encodes a GIF file consisting of one or more\nframes.\n\n<pre>\nExample:\n   AnimatedGifEncoder e = new AnimatedGifEncoder();\n   e.start(outputFileName);\n   e.setDelay(1000);   // 1 frame per sec\n   e.addFrame(image1);\n   e.addFrame(image2);\n   e.finish();\n</pre>\n\nNo copyright asserted on the source code of this class. May be used for any\npurpose, however, refer to the Unisys LZW patent for restrictions on use of\nthe associated LZWEncoder class. Please forward any corrections to questions\nat fmsware.com.",
            "author": "Kevin Weiner, FM Software",
            "version": "1.03 November 2003",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 60,
            "description": "Sets the delay time between each frame, or changes it for subsequent\nframes (applies to last frame added).",
            "params": [
                {
                    "name": "ms",
                    "description": "int delay time in milliseconds"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 72,
            "description": "Sets the GIF frame disposal code for the last added frame and any\nsubsequent frames. Default is 0 if no transparent color has been set,\notherwise 2.",
            "params": [
                {
                    "name": "code",
                    "description": "int disposal code."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 88,
            "description": "Sets the number of times the set of GIF frames should be played. Default\nis 1; 0 means play indefinitely. Must be invoked before the first image\nis added.",
            "params": [
                {
                    "name": "iter",
                    "description": "int number of iterations."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 104,
            "description": "Sets the transparent color for the last added frame and any subsequent\nframes. Since all colors are subject to modification in the quantization\nprocess, the color in the final palette for each frame closest to the\ngiven color becomes the transparent color for that frame. May be set to\nnull to indicate no transparent color.",
            "params": [
                {
                    "name": "c",
                    "description": "Color to be treated as transparent on display."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 119,
            "description": "Adds next GIF frame. The frame is not written immediately, but is\nactually deferred until the next frame is received so that timing data\ncan be inserted. Invoking <code>finish()</code> flushes all frames. If\n<code>setSize</code> was not invoked, the size of the first image is used\nfor all subsequent frames.",
            "params": [
                {
                    "name": "im",
                    "description": "BufferedImage containing frame to write."
                }
            ],
            "return": {
                "description": "true if successful."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 174,
            "description": "Flushes any pending data and closes output file. If writing to an\nOutputStream, the stream is not closed.",
            "return": {
                "description": "If saving was successful."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 213,
            "description": "Sets frame rate in frames per second. Equivalent to\n<code>setDelay(1000/fps)</code>.",
            "params": [
                {
                    "name": "fps",
                    "description": "float frame rate (frames per second)"
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 228,
            "description": "Sets quality of color quantization (conversion of images to the maximum\n256 colors allowed by the GIF specification). Lower values (minimum = 1)\nproduce better colors, but slow processing significantly. 10 is the\ndefault, and produces good color mapping at reasonable speeds. Values\ngreater than 20 do not yield significant improvements in speed.",
            "params": [
                {
                    "name": "quality",
                    "description": "int greater than 0."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 245,
            "description": "Sets the GIF frame size. The default size is the size of the first frame\nadded if this method is not invoked.",
            "params": [
                {
                    "name": "w",
                    "description": "int frame width."
                },
                {
                    "name": "h",
                    "description": "int frame width."
                }
            ],
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 267,
            "description": "Initiates GIF file creation on the given stream. The stream is not closed\nautomatically.",
            "params": [
                {
                    "name": "os",
                    "description": "OutputStream on which GIF images are written."
                }
            ],
            "return": {
                "description": "false if initial write failed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 293,
            "description": "Initiates writing of a GIF file with the specified name.",
            "params": [
                {
                    "name": "file",
                    "description": "String containing output file name."
                }
            ],
            "return": {
                "description": "false if open or initial write failed."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 316,
            "description": "Analyzes image colors and creates color map.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 353,
            "description": "Returns index of palette color closest to c",
            "params": [
                {
                    "name": "c",
                    "description": "Color to find"
                }
            ],
            "return": {
                "description": "Closest palette color index."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 387,
            "description": "Extracts image pixels into byte array \"pixels\"",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 406,
            "description": "Writes Graphic Control Extension",
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 445,
            "description": "Writes Image Descriptor",
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 475,
            "description": "Writes Logical Screen Descriptor",
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 496,
            "description": "Writes Netscape application extension to define repeat count.",
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 514,
            "description": "Writes color table",
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 530,
            "description": "Encodes and writes pixel data",
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 542,
            "description": "Write 16-bit value to output stream, LSB first",
            "params": [
                {
                    "name": "value",
                    "description": "Value to write"
                }
            ],
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java",
            "line": 556,
            "description": "Writes string to output stream",
            "params": [
                {
                    "name": "s",
                    "description": "String to write."
                }
            ],
            "throws": {
                "description": "IOException\n            File writing exception."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 17,
            "description": "Class GifDecoder - Decodes a GIF file into one or more frames.\n \n \nNo copyright asserted on the source code of this class.  May be used for\nany purpose, however, refer to the Unisys LZW patent for any additional\nrestrictions.  Please forward any corrections to questions at fmsware.com.",
            "author": "Kevin Weiner, FM Software; LZW decoder adapted from John Cristy's ImageMagick.",
            "version": "1.03 November 2003",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 32,
            "description": "File read status: No errors.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 37,
            "description": "File read status: Error decoding file (may be partially decoded)",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 42,
            "description": "File read status: Unable to open source.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 106,
            "description": "Gets display duration for specified frame.",
            "params": [
                {
                    "name": "n",
                    "description": "int index of frame"
                }
            ],
            "return": {
                "description": "delay in milliseconds"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 121,
            "description": "Gets the number of frames read from file.",
            "return": {
                "description": "frame count"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 129,
            "description": "Gets the first (or only) image read.",
            "return": {
                "description": "BufferedImage containing first frame, or null if none."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 138,
            "description": "Gets the \"Netscape\" iteration count, if any.\nA count of 0 means repeat indefinitiely.",
            "return": {
                "description": "iteration count if one was specified, else 1."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 148,
            "description": "Creates new frame image from current data (and previous\nframes as specified by their disposition codes).",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 239,
            "description": "Gets the image contents of frame n.",
            "params": [
                {
                    "name": "n",
                    "description": "Frame number to get"
                }
            ],
            "return": {
                "description": "BufferedImage representation of frame, or null if n is invalid."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 253,
            "description": "Gets image size.",
            "return": {
                "description": "GIF image dimensions"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 262,
            "description": "Reads GIF image from stream",
            "params": [
                {
                    "name": "is",
                    "description": "containing GIF file."
                }
            ],
            "return": {
                "description": "read status code (0 = no errors)"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 289,
            "description": "Reads GIF image from stream",
            "params": [
                {
                    "name": "is",
                    "description": "containing GIF file."
                }
            ],
            "return": {
                "description": "read status code (0 = no errors)"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 318,
            "description": "Reads GIF file from specified file/URL source  \n(URL assumed if name contains \":/\" or \"file:\")",
            "params": [
                {
                    "name": "name",
                    "description": "String containing source"
                }
            ],
            "return": {
                "description": "read status code (0 = no errors)"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 344,
            "description": "Decodes LZW image data into pixel array.\nAdapted from John Cristy's ImageMagick.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 476,
            "description": "Returns true if an error was encountered during reading/decoding",
            "return": {
                "description": "Error occurred"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 484,
            "description": "Initializes or re-initializes reader",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 495,
            "description": "Reads a single byte from the input stream.",
            "return": {
                "description": "Byte as integer"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 509,
            "description": "Reads next variable length block from input.",
            "return": {
                "description": "number of bytes stored in \"buffer\""
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 536,
            "description": "Reads color table as 256 RGB integer values",
            "params": [
                {
                    "name": "ncolors",
                    "description": "int number of colors to read"
                }
            ],
            "return": {
                "description": "int array containing 256 colors (packed ARGB with full alpha)"
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 567,
            "description": "Main file parser.  Reads GIF content blocks.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 619,
            "description": "Reads Graphics Control Extension values",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 635,
            "description": "Reads GIF file header information.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 655,
            "description": "Reads next frame image",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 713,
            "description": "Reads Logical Screen Descriptor",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 733,
            "description": "Reads Netscape extenstion to obtain iteration count",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 748,
            "description": "Reads next 16-bit value, LSB first",
            "return": {
                "description": "Two bytes as short."
            },
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 757,
            "description": "Resets frame state for reading next image.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java",
            "line": 771,
            "description": "Skips variable length blocks up to and including\nnext zero length block.",
            "class": "CruncherCache"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/cruncher/cache/CruncherCache.java",
            "line": 31,
            "itemtype": "method",
            "name": "cache",
            "params": [
                {
                    "name": "obj",
                    "description": "Thing to cache.",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Unique name used to store and retrieve the cached object.",
                    "type": "String"
                }
            ],
            "class": "CruncherCache",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java",
            "line": 3,
            "description": "An API for Resolver enumerations that define a set of keys or values for an operation.",
            "author": "dharvey",
            "since": "11/2011",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java",
            "line": 11,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java",
            "line": 14,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java",
            "line": 44,
            "description": "Replace special characters with XML escapes:",
            "params": [
                {
                    "name": "string",
                    "description": "The string to be escaped."
                }
            ],
            "return": {
                "description": "The escaped string."
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java",
            "line": 81,
            "description": "Convert a JSONObject into a well-formed, element-normal XML string.",
            "params": [
                {
                    "name": "object",
                    "description": "A JSONObject."
                }
            ],
            "return": {
                "description": "A string."
            },
            "throws": {
                "description": "JSONException JSON Formatting Exception"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java",
            "line": 94,
            "description": "Convert a JSONObject into a well-formed, element-normal XML string.",
            "params": [
                {
                    "name": "object",
                    "description": "A JSONObject."
                },
                {
                    "name": "tagName",
                    "description": "The optional name of the enclosing tag."
                }
            ],
            "return": {
                "description": "A string."
            },
            "throws": {
                "description": "JSONException JSON Formatting Exception"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java",
            "line": 42,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java",
            "line": 81,
            "description": "Converts encrypted bytes to a consistent format not affected by url\nencoding.",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java",
            "line": 122,
            "description": "Generates an unpredictable, but consistent byte sequence for consistent\ndecoding.",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java",
            "line": 136,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java",
            "line": 151,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java",
            "line": 41,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java",
            "line": 78,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java",
            "line": 114,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java",
            "line": 127,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java",
            "line": 141,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/service/CruncherSendEmail.java",
            "line": 20,
            "description": "Sends an email using the parameters passed in.\n\nThe template value searches for \"${from}\" Email sending has no return\nvalue, so this method just returns the body of the email sent.",
            "return": {
                "description": "the body of the email sent"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/service/CruncherSendEmail.java",
            "line": 77,
            "description": "Replaces $(key) in the format string with the corresponding value from this JSONObject,\nor the attached parameters. Setting keys and any keys specified in the ignore array may\nnot be referenced in the format string, or an exception is thrown.",
            "params": [
                {
                    "name": "format",
                    "description": "Formatted string used to compose the email, with",
                    "type": "Variables"
                },
                {
                    "name": "c",
                    "description": "Context of the Web Service Call"
                },
                {
                    "name": "parameters",
                    "description": "Parameters to the Cruncher"
                },
                {
                    "name": "dataStreams",
                    "description": "Datastreams we can access"
                },
                {
                    "name": "ignore",
                    "description": "Variables to ignore"
                }
            ],
            "return": {
                "description": "Formatted string with filled in variables."
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java",
            "line": 84,
            "description": "Capitalizes a single word, or all the words in a string\n(does not handle camel-case, acronyms, or special chars).",
            "see": [
                "#toTitleCase(String",
                "boolean)"
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java",
            "line": 118,
            "description": "Replaces $(key) in the format string with the corresponding value from this JSONObject,\nor the attached parameters. Setting keys and any keys specified in the ignore array may\nnot be referenced in the format string, or an exception is thrown.",
            "params": [
                {
                    "name": "format",
                    "description": "String to use to format."
                },
                {
                    "name": "c",
                    "description": "Context of the Web Service Call"
                },
                {
                    "name": "parameters",
                    "description": "Parameters to the Cruncher"
                },
                {
                    "name": "dataStreams",
                    "description": "Datastreams we can access"
                },
                {
                    "name": "ignore",
                    "description": "Tags in the string to ignore."
                }
            ],
            "return": {
                "description": "Formatted string"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java",
            "line": 231,
            "description": "Title case sentence, or capitalize a word: if lowerFirst is false,\ncamel-cased words are parsed, and acronyms such as \"JSONObject\" are separated:\n\"JSON Object\". In either case, underscores '_' and spaces delimit words,\nwhereas words with dashes '-' and single quotes are considered single words.",
            "params": [
                {
                    "name": "string",
                    "description": "String to titleCase"
                },
                {
                    "name": "lowerFirst",
                    "description": "Lowercase the string first?"
                }
            ],
            "return": {
                "description": "Titlecased String"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java",
            "line": 333,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java",
            "line": 37,
            "description": "Both GET and POST execute in the same fashion. The only difference is\nthat a GET is guaranteed not to have datastreams (files) attached to it.",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java",
            "line": 59,
            "description": "Both GET and POST execute in the same fashion. The only difference is\nthat a GET is guaranteed not to have datastreams (files) attached to it.",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java",
            "line": 121,
            "description": "Appropriately wraps a JSONP call if the request has a callback parameter.\nThis is required by cross-domain ajax service calls. See: <a\nhref=\"http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\"\n>this link</a>",
            "params": [
                {
                    "name": "request",
                    "description": "HTTP Request"
                },
                {
                    "name": "resultsAsString",
                    "description": "The JSONP object to return."
                }
            ],
            "return": {
                "description": "If appropriate, a JSONP object."
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java",
            "line": 154,
            "description": "Get an integer value from the request object, defaulting to a known value\nif it is not present.",
            "params": [
                {
                    "name": "request",
                    "description": "HTTP request"
                },
                {
                    "name": "key",
                    "description": "HTTP request parameter name"
                },
                {
                    "name": "defValue",
                    "description": "the default value if key does not exist"
                }
            ],
            "return": {
                "description": "the value corresponding to key parsed as an int, or the default\n        value"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java",
            "line": 173,
            "description": "Get value from the request object, defaulting to a known value if it is\nnot present.",
            "params": [
                {
                    "name": "request",
                    "description": "HTTP request"
                },
                {
                    "name": "key",
                    "description": "HTTP request parameter name"
                },
                {
                    "name": "defValue",
                    "description": "the default value if key does not exist"
                }
            ],
            "return": {
                "description": "the value corresponding to key, or the default value"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java",
            "line": 194,
            "description": "Get an string value from the request object, defaulting to a known value\nif it is not present.",
            "params": [
                {
                    "name": "request",
                    "description": "HTTP request"
                },
                {
                    "name": "key",
                    "description": "HTTP request parameter name"
                },
                {
                    "name": "defValue",
                    "description": "the value to return if the key doesn't exist"
                }
            ],
            "return": {
                "description": "the param, attrib, or header value corresponding to the key, or\n        defValue"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/resolver/lang/LevrJsParser.java",
            "line": 30,
            "author": "fray",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/resolver/CruncherBindWebService.java",
            "line": 15,
            "author": "fray",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/resolver/CruncherJavascriptBinder.java",
            "line": 17,
            "author": "fray",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/resolver/ResolverFactory.java",
            "line": 37,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.core/src/main/java/com/eduworks/App.java",
            "line": 3,
            "description": "Hello world!",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java",
            "line": 46,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java",
            "line": 52,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java",
            "line": 58,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java",
            "line": 64,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java",
            "line": 70,
            "description": "Checks the security of the document, throwing a security exception if the\npassword has been violated.",
            "params": [
                {
                    "name": "d",
                    "description": "The document to check."
                },
                {
                    "name": "parameters",
                    "description": ""
                }
            ],
            "throws": {
                "description": "JSONException"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java",
            "line": 103,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 20,
            "description": "BCrypt implements OpenBSD-style Blowfish password hashing using\nthe scheme described in \"A Future-Adaptable Password Scheme\" by\nNiels Provos and David Mazieres.\n<p>\nThis password hashing system tries to thwart off-line password\ncracking using a computationally-intensive hashing algorithm,\nbased on Bruce Schneier's Blowfish cipher. The work factor of\nthe algorithm is parameterised, so it can be increased as\ncomputers get faster.\n<p>\nUsage is really simple. To hash a password for the first time,\ncall the hashpw method with a random salt, like this:\n<p>\n<code>\nString pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); <br>\n</code>\n<p>\nTo check whether a plaintext password matches one that has been\nhashed previously, use the checkpw method:\n<p>\n<code>\nif (BCrypt.checkpw(candidate_password, stored_hash))<br>\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"It matches\");<br>\nelse<br>\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"It does not match\");<br>\n</code>\n<p>\nThe gensalt() method takes an optional parameter (log_rounds)\nthat determines the computational complexity of the hashing:\n<p>\n<code>\nString strong_salt = BCrypt.gensalt(10)<br>\nString stronger_salt = BCrypt.gensalt(12)<br>\n</code>\n<p>\nThe amount of work increases exponentially (2**log_rounds), so \neach increment is twice as much work. The default log_rounds is\n10, and the valid range is 4 to 31.",
            "author": "Damien Miller",
            "version": "0.2",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 375,
            "description": "Encode a byte array using bcrypt's slightly-modified base64\nencoding scheme. Note that this is *not* compatible with\nthe standard MIME-base64 encoding.",
            "params": [
                {
                    "name": "d",
                    "description": "the byte array to encode"
                },
                {
                    "name": "len",
                    "description": "the number of bytes to encode"
                }
            ],
            "return": {
                "description": "base64-encoded string"
            },
            "exception": "IllegalArgumentException if the length is invalid",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 418,
            "description": "Look up the 3 bits base64-encoded by the specified character,\nrange-checking againt conversion table",
            "params": [
                {
                    "name": "x",
                    "description": "the base64-encoded value"
                }
            ],
            "return": {
                "description": "the decoded value of x"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 430,
            "description": "Decode a string encoded using bcrypt's base64 scheme to a\nbyte array. Note that this is *not* compatible with\nthe standard MIME-base64 encoding.",
            "params": [
                {
                    "name": "s",
                    "description": "the string to decode"
                },
                {
                    "name": "maxolen",
                    "description": "the maximum number of bytes to decode"
                }
            ],
            "return": {
                "description": "an array containing the decoded bytes"
            },
            "throws": {
                "description": "IllegalArgumentException if maxolen is invalid"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 480,
            "description": "Blowfish encipher a single 64-bit block encoded as\ntwo 32-bit halves",
            "params": [
                {
                    "name": "lr",
                    "description": "an array containing the two 32-bit half blocks"
                },
                {
                    "name": "off",
                    "description": "the position in the array of the blocks"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 509,
            "description": "Cycically extract a word of key material",
            "params": [
                {
                    "name": "data",
                    "description": "the string to extract the data from"
                },
                {
                    "name": "offp",
                    "description": "a \"pointer\" (as a one-entry array) to the\ncurrent offset into data"
                }
            ],
            "return": {
                "description": "the next word of material from data"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 530,
            "description": "Initialise the Blowfish key schedule",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 538,
            "description": "Key the Blowfish cipher",
            "params": [
                {
                    "name": "key",
                    "description": "an array containing the key"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 564,
            "description": "Perform the \"enhanced key schedule\" step described by\nProvos and Mazieres in \"A Future-Adaptable Password Scheme\"\nhttp://www.openbsd.org/papers/bcrypt-paper.ps",
            "params": [
                {
                    "name": "data",
                    "description": "salt information"
                },
                {
                    "name": "key",
                    "description": "password information"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 597,
            "description": "Perform the central password hashing step in the\nbcrypt scheme",
            "params": [
                {
                    "name": "password",
                    "description": "the password to hash"
                },
                {
                    "name": "salt",
                    "description": "the binary salt to hash with the password"
                },
                {
                    "name": "log_rounds",
                    "description": "the binary logarithm of the number\nof rounds of hashing to apply"
                }
            ],
            "return": {
                "description": "an array containing the binary hashed password"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 640,
            "description": "Hash a password using the OpenBSD bcrypt scheme",
            "params": [
                {
                    "name": "password",
                    "description": "the password to hash"
                },
                {
                    "name": "salt",
                    "description": "the salt to hash with (perhaps generated\nusing BCrypt.gensalt)"
                }
            ],
            "return": {
                "description": "the hashed password"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 697,
            "description": "Generate a salt for use with the BCrypt.hashpw() method",
            "params": [
                {
                    "name": "log_rounds",
                    "description": "the log2 of the number of rounds of\nhashing to apply - the work factor therefore increases as\n2**log_rounds."
                },
                {
                    "name": "random",
                    "description": "an instance of SecureRandom to use"
                }
            ],
            "return": {
                "description": "an encoded salt value"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 720,
            "description": "Generate a salt for use with the BCrypt.hashpw() method",
            "params": [
                {
                    "name": "log_rounds",
                    "description": "the log2 of the number of rounds of\nhashing to apply - the work factor therefore increases as\n2**log_rounds."
                }
            ],
            "return": {
                "description": "an encoded salt value"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 731,
            "description": "Generate a salt for use with the BCrypt.hashpw() method,\nselecting a reasonable default for the number of hashing\nrounds to apply",
            "return": {
                "description": "an encoded salt value"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java",
            "line": 741,
            "description": "Check that a plaintext password matches a previously hashed\none",
            "params": [
                {
                    "name": "plaintext",
                    "description": "the plaintext password to verify"
                },
                {
                    "name": "hashed",
                    "description": "the previously-hashed password"
                }
            ],
            "return": {
                "description": "true if the passwords match, false otherwise"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 156,
            "description": "Loads an existing ontology from the local directory and wraps it in an\nOntology object to be manipulated",
            "params": [
                {
                    "name": "tdbDataSet",
                    "description": "Dataset used to load the ontology."
                },
                {
                    "name": "identifier",
                    "description": "- Identifier of the ontology (right now this is the filename\n           without the directory or extension)"
                }
            ],
            "return": {
                "description": "Ontology Object wrapping the OWLOntology that was loaded"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 225,
            "description": "Creates a new ontology file in the local directory and then loads and\nwraps it in an Ontology object",
            "params": [
                {
                    "name": "tdbDataSet",
                    "description": "Dataset specification to use to create the ontology."
                },
                {
                    "name": "identifier",
                    "description": "- The identifier of the new ontology (right now, just the name\n           of the file without the path or extension)"
                }
            ],
            "return": {
                "description": "Ontology Object wrapping the newly created JenaOntology"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 285,
            "description": "Constructor for creating/loading a new ontology, wraps the ontology given\nand saves the",
            "params": [
                {
                    "name": "o",
                    "description": "- OntModel to be wrapped"
                },
                {
                    "name": "dataSet",
                    "description": ""
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 301,
            "description": "Saves the underlying ontology after modifications to the ontology that\nneed to be propogated for queries",
            "params": [
                {
                    "name": "tdbDataSet",
                    "description": "Dataset to save to the ontology."
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 367,
            "description": "Returns the OntologyClass object for the classId specified",
            "params": [
                {
                    "name": "classId",
                    "description": "- Id of the class that will be retrieved"
                }
            ],
            "return": {
                "description": "OntologyClass wrapper for the class specified"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 424,
            "description": "Returns a map from classId to OntologyClass of all of the classes in this\nontology",
            "return": {
                "description": "map from classId to OntologyClass of all of the classes in this\n        ontology"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 459,
            "description": "Creates a new instance of a class with the property values given",
            "params": [
                {
                    "name": "classId",
                    "description": "- Id of the class that is to be instantiated"
                },
                {
                    "name": "values",
                    "description": "- values of the properties for the new instance"
                }
            ],
            "return": {
                "description": "OntologyInstance wrapper for the new instance created"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 483,
            "description": "Returns the OntologyInstance object for the instanceId specified",
            "params": [
                {
                    "name": "instanceId",
                    "description": "- Id of the instance to be retrieved"
                }
            ],
            "return": {
                "description": "OntologyInstance wrapper for the instance specified"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 623,
            "description": "Returns the OntologyProperty object for the propertyId specified",
            "params": [
                {
                    "name": "propertyId",
                    "description": "- identifier of the property that we want to retrieve"
                }
            ],
            "return": {
                "description": "OntologyProperty object wrapping the property specified"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 682,
            "description": "Returns a Map from propertyId to OntologyProperty object of all of the\nproperties in this ontology",
            "return": {
                "description": "Map from propertyId to OntologyProperty of all properties in the\n        ontology"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 743,
            "description": "Returns a Map from propertyId to OntologyProperty object of all of the\ndata properties in this ontology",
            "return": {
                "description": "Map from propertyId to OntologyProperty of all data properties in\n        the ontology"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java",
            "line": 776,
            "description": "Returns a Map from propertyId to OntologyProperty object of all of the\nobject properties in this ontology",
            "return": {
                "description": "Map from propertyId to OntologyProperty of all object properties\n        in the ontology"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java",
            "line": 411,
            "description": "Creates a new Ontology Class Object, saving the necessary data for future\nmanipulation/querying of the class. There is no guarantee that the class\nalready exists in the ontology, this could be creating a new class right\nnow",
            "params": [
                {
                    "name": "o",
                    "description": "- Ontology that the class belongs to"
                },
                {
                    "name": "identifier",
                    "description": "- IRI of the Class that will be returned"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java",
            "line": 518,
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java",
            "line": 527,
            "description": "Returns all of the Ontology Instances of this class in a map",
            "return": {
                "description": "a Map of String (InstanceId) to the OntologyInstance it\n        identifies"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java",
            "line": 559,
            "description": "Returns a JSONObject that contains the information that represents this\nclass of the form: Where propId is an (idChar)-formatted Id of a property",
            "return": {
                "description": "JSON representation of the ontology."
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java",
            "line": 761,
            "description": "Returns the Ontology that this class is a part of",
            "return": {
                "description": "Ontology object that this class is described in"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java",
            "line": 32,
            "description": "Creates a new Instance of the Class that is passed in with the values of\nproperties being those that are passed in",
            "params": [
                {
                    "name": "cls",
                    "description": "- Class that we want to create a new instance of"
                },
                {
                    "name": "values",
                    "description": "- Values of the new Instance Properties"
                }
            ],
            "return": {
                "description": "OntologyInstance of the newly created instance"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java",
            "line": 437,
            "description": "(DANGER) Creates a new OntologyInstance, wrapping the OWLAPI object\npassed in, assumes ontology passed in is the ontology in which the\ninstance is within",
            "params": [
                {
                    "name": "jInstance",
                    "description": "- OWLAPI Individual to be wrapped"
                },
                {
                    "name": "o",
                    "description": "- Ontology that this Individual is a part of"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java",
            "line": 470,
            "description": "Creates a new OntologyInstance by looking through ontology passed in and\nfinding the Instance that is referenced by the IRI passed in. There is no\nguarantee that the instance exists, this could be creating the instance",
            "params": [
                {
                    "name": "o",
                    "description": "- Ontology to look through for the instance specified"
                },
                {
                    "name": "iri",
                    "description": "- IRI of the instance we want to wrap"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java",
            "line": 496,
            "description": "Updates the OntologyInstance with the values passed in",
            "params": [
                {
                    "name": "values",
                    "description": "Values to insert into the OntologyInstance"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java",
            "line": 731,
            "description": "Delete's the instance from it's ontology",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java",
            "line": 741,
            "description": "Returns a JSONObject that represents this instance in the form:",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java",
            "line": 393,
            "description": "Creates an OntologyProperty Wrapper to wrap the OWLAPI OWLProperty passed\nin, assumes that the ontology passed in is the owner of the property",
            "params": [
                {
                    "name": "prop",
                    "description": "Property to wrap"
                },
                {
                    "name": "o",
                    "description": "Ontology to use to wrap the property"
                },
                {
                    "name": "jena",
                    "description": "Jena based property"
                }
            ],
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java",
            "line": 724,
            "description": "Delete's the property and removes any references to it from the ontology",
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java",
            "line": 732,
            "description": "Returns a JSONObject representing this property of the form: If the\nproperty is an object property it will also have the following true/false\nfields: symmetric, inverse-functional, transitive, asymmetric, reflexive,\nand irreflexive. It will also have the following 'inverses' @\npropertyId field",
            "return": {
                "description": "JSON Representation of the property."
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyWrapper.java",
            "line": 11,
            "description": "Returns the Id of the OntologyObject (the part after the # in the IRI), should convert it to the @-format that can be sent across \nweb services and still be recognized as an ID",
            "return": {
                "description": "ID of the OntologyObject"
            },
            "class": "",
            "module": "ew.levr.base"
        },
        {
            "file": "ew.ontology/src/main/java/com/eduworks/ontology/OntologyWrapper.java",
            "line": 18,
            "description": "Returns the Full IRI of the OntologyObject",
            "return": {
                "description": "IRI of the OntologyObject"
            },
            "class": "",
            "module": "ew.levr.base"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/util/JSONUtils.java:32"
        },
        {
            "message": "unknown tag: version",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:12"
        },
        {
            "message": "unknown tag: version",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:17"
        },
        {
            "message": "unknown tag: version",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:20"
        },
        {
            "message": "unknown tag: exception",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:375"
        },
        {
            "message": "Missing item type\nTypically, toString is used to describe things in a debug way. Displayable\nprovides a user-friendly representation of the object.",
            "line": " ew.common/src/main/java/com/eduworks/interfaces/EwDisplayable.java:3"
        },
        {
            "message": "Missing item type\nReturns the object in a user friendly format.",
            "line": " ew.common/src/main/java/com/eduworks/interfaces/EwDisplayable.java:12"
        },
        {
            "message": "Missing item type\nAllow an object to serialize into a JSON Object.",
            "line": " ew.common/src/main/java/com/eduworks/interfaces/EwJsonSerializable.java:6"
        },
        {
            "message": "Missing item type\nReturns the object serialized as a JSON Object.",
            "line": " ew.common/src/main/java/com/eduworks/interfaces/EwJsonSerializable.java:14"
        },
        {
            "message": "Missing item type\nA class to extend {@link JSONArray} and implement {@link EwJsonCollection}.\nProvides the following features and functionality:\n<ul>\n<li>enhances all JSONArray behavior even when JSONArray methods are called\n</li>\n<li>processes complex array keys \"key[0][1]\" against nested JSON objects</li>\n<li>wraps incoming/outgoing {@link JSONArray}s as EwJsonArrays</li>\n<li>wraps incoming/outgoing {@link JSONObject}s as {@link EwJsonObject}s</li>\n</ul>\n<p>\nThis list can and should grow as Eduworks applications have need of new JSON\narray functionality.\n</p>",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:20"
        },
        {
            "message": "Missing item type\nConvert String or {@link JSONArray} to EwJsonArray, and put and return it\nif it is valid.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:61"
        },
        {
            "message": "Missing item type\nMerges values from an EwJsonCollection starting at the key/index\nspecified by ref if not null. If ref is null or non-numeric, all possible\nvalues in \"from\" are appended to the end of the array.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:102"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:140"
        },
        {
            "message": "Missing item type\nParse contents of json array String, and merge them with the array\nstarting at index. If array is null, an {@link EwJsonArray} is\ninstantiated from source and returned. If source is null the array is\nconverted to an {@link EwJsonArray} and returned. If index is null or\nnegative, the new array elements are appended to the end of the one\npassed in.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:153"
        },
        {
            "message": "Missing item type\nIf \"from\" is parsable as JSON, merge it with \"into\"; otherwise if ref and\nfrom are not null, put \"from\". Finally, return \"into\" as an EwJsonArray.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:234"
        },
        {
            "message": "Missing item type\nInitializes an array with the collections' values if it is a\n{@link EwJsonArray} or with the {@link EwJsonCollection} as the first\nelement in the array.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:306"
        },
        {
            "message": "Missing item type\nIf source is JSONArray or array, merge; if JSONObject, convert to\nEwJsonObject and put; if String, try to parse and put; otherwise insert\nsource as first element in array.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:323"
        },
        {
            "message": "Missing item type\nCalls {@link #opt(Object)} to parse any array keys.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:376"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:439"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:455"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:545"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:558"
        },
        {
            "message": "Missing item type\nParse string value as json and append values.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:565"
        },
        {
            "message": "Missing item type\nOverridden to ensure complex keys are dereferenced by all getters. This\nmethod is what enables all gets and opts to parse array keys.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:576"
        },
        {
            "message": "Missing item type\nReferenced by overridden {@link #opt(int)}, which is called throughout\nparent code.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:586"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:616"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:639"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:662"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:685"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:695"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:719"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:729"
        },
        {
            "message": "Missing item type\nOverridden to avoid conversion of {@link Collection}s to\n{@link JSONArray}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:815"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:867"
        },
        {
            "message": "Missing item type\nInsert a value at index (if ref can be converted to one) even if the\narray has to be extended (padded by null values).",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:880"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:897"
        },
        {
            "message": "Missing item type\nOverridden to first try wrapping as a valid JSON value. All index-based\nputs in parent call this method. All index-based puts also pad the\nunderlying {@link ArrayList} with null values when index is beyond the\ncurrent range of the array.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:906"
        },
        {
            "message": "Missing item type\nInsert a value at index (if ref can be converted to one) even if the\narray has to be extended (padded by null values). If index is less than\nzero or value is null, nothing is done.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:925"
        },
        {
            "message": "Missing item type\nInsert a value at index (if ref can be converted to one) even if the\narray has to be extended (padded by null values). If the index already\nhas a value, a {@link JSONException} is thrown. If index is less than\nzero or value is null, nothing is done.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:943"
        },
        {
            "message": "Missing item type\nCompares this with object, after it has been wrapped by\n{@link EwJson#wrap(Object)}.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonArray.java:983"
        },
        {
            "message": "Missing item type\nA class to extend {@link JSONObject} and implement {@link EwJsonCollection}.\nProvides the following features and functionality:\n<ul>\n<li>enhances all JSONObject behavior even when JSONObject methods are called\n</li>\n<li>processes complex array keys \"key[0].key[next]\" against nested JSON\nobjects</li>\n<li>wraps incoming/outgoing {@link JSONArray}s as EwJsonArrays</li>\n<li>wraps incoming/outgoing {@link JSONObject}s as {@link EwJsonObject}s</li>\n</ul>\n<p>\nThis list can and should grow as Eduworks applications have need of new JSON\narray functionality.\n</p>",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:22"
        },
        {
            "message": "Missing item type\nConvert String or {@link JSONObject} to EwJsonObject, and put and return\nit if it is valid.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:65"
        },
        {
            "message": "Missing item type\nMerges values from an {@link EwJsonCollection} to a {@link EwJsonObject}.\nIf \"ref\" is not null, merge \"from\" with any existing json value at \"ref\"\n-- a non-json value at \"ref\" will be overwritten. If \"from\" is an\n{@link EwJsonArray}, its values will be merged using the indices as keys.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:106"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:155"
        },
        {
            "message": "Missing item type\nParse contents of json object String, and insert the new object at the\nspecified key (ref). If object is null, an {@link EwJsonObject} is\ninstantiated from source and returned. If source is null the object is\nconverted to an {@link EwJsonObject} and returned. If ref is null the new\nobject is merged with the the one passed in; otherwise the new object is\nmerged with anything existing at the key slot specified by ref.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:168"
        },
        {
            "message": "Missing item type\nIf \"from\" is parsable as JSON, merge it with \"into\"; otherwise if ref and\nfrom are not null, put or merge with \"from\". Finally, return \"into\" as an\nEwJsonObject.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:274"
        },
        {
            "message": "Missing item type\nAttempt to merge any object with this.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:369"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:399"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:471"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:494"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:553"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:571"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:587"
        },
        {
            "message": "Missing item type\nIterates over sorted keys and inserts separators between corresponding\nvalues",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:600"
        },
        {
            "message": "Missing item type\nOverridden to ensure complex keys are dereferenced by all getters. This\nmethod is what enables all gets and opts to parse complex keys.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:652"
        },
        {
            "message": "Missing item type\nReferenced by overridden {@link #opt(String)}, which is called throughout\nparent code.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:662"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:672"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:698"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:717"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:736"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONArray}s to\n{@link EwJsonArray}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:755"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:765"
        },
        {
            "message": "Missing item type\nOverridden to convert Strings or {@link JSONObject}s to\n{@link EwJsonObject}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:789"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:799"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:835"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:854"
        },
        {
            "message": "Missing item type\nOverridden to avoid conversion of {@link Collection}s to\n{@link JSONArray}s",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:879"
        },
        {
            "message": "Missing item type\nInserts a {@link JSONArray} created from the {@link Collection} at the\nspecified key.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:889"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:917"
        },
        {
            "message": "Missing item type\nOverridden to first try parsing value as an EwJsonCollection. All puts\nexecuted in the parent call this method. Null values result in the\nremoval of any existing value at key.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:930"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:950"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:960"
        },
        {
            "message": "Missing item type\nCompares this with object, after it has been wrapped by\n{@link EwJson#wrap(Object)}.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:1012"
        },
        {
            "message": "Missing item type\nJoins next key and value, and returns the key -- does not check nulls or\nif keys has next",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/impl/EwJsonObject.java:1064"
        },
        {
            "message": "Missing item type\nDefines a common API for classes extending members of the org.json library,\nsuch that the underlying functionality can be manipulated as an\nEwJsonCollection.\n\nProvides these basic features and functionality (see implementations for\nspecifics):\n<ul>\n<li>an extensible API of customized JSON functionality</li>\n<li>an API for converting or merging common classes into JSON</li>\n<li>an API for encoding and decoding string values</li>\n</ul>\nKnown implementations:\n<ul>\n<li>{@link EwJsonArray}</li>\n<li>{@link EwJsonObject}</li>\n</ul>",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:16"
        },
        {
            "message": "Missing item type\nAccumulate values under a key as a JSONArray.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:41"
        },
        {
            "message": "Missing item type\nTrue IFF the collection contains element.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:54"
        },
        {
            "message": "Missing item type\nReturns a newly instantiated {@link EwJsonCollection} of the same type as\nthis one.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:85"
        },
        {
            "message": "Missing item type\nChecks for presence of a value corresponding to either a simple or\ncomplex key/index in the collection.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:94"
        },
        {
            "message": "Missing item type\nChecks for presence of a value corresponding to a non-complex key/index\nin the collection.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:104"
        },
        {
            "message": "Missing item type\nMeasure the number of items in the collection.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:120"
        },
        {
            "message": "Missing item type\nCopy everything from the incoming collection to this one. Overwrites\nexisting values.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:127"
        },
        {
            "message": "Missing item type\nAttempt to parse value as json and merge values; if not parsable, do\nnothing.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:140"
        },
        {
            "message": "Missing item type\nReduce collections to the single element they contain if possible, but\nleave the original object unchanged.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:207"
        },
        {
            "message": "Missing item type\nDecode a String value at ref using URL encoding.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:216"
        },
        {
            "message": "Missing item type\nEncode a String value at ref for the URL.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonCollection.java:225"
        },
        {
            "message": "Missing item type\nDefines a basic, Eduworks JSON entity. Provides an API for methods that all\nJSON based entities tend to have even though they are not related.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java:7"
        },
        {
            "message": "Missing item type\nPretty prints the string.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java:17"
        },
        {
            "message": "Missing item type\nWrite the contents of the JSON as text to a writer.",
            "line": " ew.common/src/main/java/com/eduworks/lang/json/EwJsonEntity.java:28"
        },
        {
            "message": "Missing item type\nProvides general helper methods for {@link JSONArray} and {@link JSONObject}.\nWhen methods deal in specific {@link EwJsonCollection}s, they should be put\nin their respective classes. This class is reserved specifically for the\nbasic classes in org.json.*.",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:25"
        },
        {
            "message": "Missing item type\nRecurses over coll, and adds all nested non-null, non-json elements.",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:159"
        },
        {
            "message": "Missing item type\nRecurses over coll, and adds any nested non-null, non-json elements at\nkey regardless of depth",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:208"
        },
        {
            "message": "Missing item type\nCasts object as {@link JSONArray} if it is an instance of one, or parses\na {@link JSONArray} from object if it is a String.",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:654"
        },
        {
            "message": "Missing item type\nCasts object as {@link JSONObject} if it is an instance of one, or parses\na {@link JSONObject} from object if it is a String.",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:679"
        },
        {
            "message": "Missing item type\nThrow an exception if the object is a NaN or infinite number. Roughly\nequivalent to {@link JSONObject#testValidity(Object)}.",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:810"
        },
        {
            "message": "Missing item type\nEnsure primitive values are wrapped as Objects and strings are parsed as\nJSON if possible. If \"convert\" is specified, Collections/Maps are\nconverted to {@link EwJsonCollection}s, or if the string value of the\nobject is not parsable as json, a new EwJsonObject is created and\npopulated from the object as though it were a \"bean\" (getters to keys",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:1112"
        },
        {
            "message": "Missing item type\nDeep copies all JSON elements, shallow copies anything else.",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:1289"
        },
        {
            "message": "Missing item type\nDeep copies all JSON elements, shallow copies anything else.",
            "line": " ew.common/src/main/java/com/eduworks/lang/util/EwJson.java:1316"
        },
        {
            "message": "Missing item type\nA map to be used to cache objects. Objects may vanish at any point based on\nmemory available and garbage collection.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java:13"
        },
        {
            "message": "Missing item type\nRemoves all dangling soft references.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java:37"
        },
        {
            "message": "Missing item type\nReturns the inner object of a soft reference, if it exists and is not\nnull.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwCacheMap.java:93"
        },
        {
            "message": "Missing item type\nSimple factory class.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwFactory.java:3"
        },
        {
            "message": "Missing item type\nCreate a new object and return it.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwFactory.java:13"
        },
        {
            "message": "Missing item type\nHelper methods appended to a HashMap.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwHashMap.java:6"
        },
        {
            "message": "Missing item type\nHelper methods on HashSet",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwHashSet.java:11"
        },
        {
            "message": "Missing item type\nReturns true IFF any value in coll is found in this set.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwHashSet.java:60"
        },
        {
            "message": "Missing item type\nHelper methods attached on top of ArrayList.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwList.java:18"
        },
        {
            "message": "Missing item type\nReturns true IFF this list contains an element in c, uses\n{@link #contains(Object)}",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwList.java:115"
        },
        {
            "message": "Missing item type\nReturns true IFF this list contains an element in c, uses\n{@link #contains(Object, Comparator)}",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwList.java:131"
        },
        {
            "message": "Missing item type\nReturns true IFF this list contains an element in c, uses\n{@link #contains(Object)}",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwList.java:148"
        },
        {
            "message": "Missing item type\nReturns true IFF this list contains an element who's toString() is\nString.equals(str)",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwList.java:163"
        },
        {
            "message": "Missing item type\nRepresents a string with positional information about where it appears within\na tokenized series of strings.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwText.java:3"
        },
        {
            "message": "Missing item type\nAn text span contains text that includes more than one words and therefore\nspans a series of positions within a sentence.",
            "line": " ew.common/src/main/java/com/eduworks/lang/EwTextSpan.java:6"
        },
        {
            "message": "Missing item type\nClose a stream or reader/writer object.",
            "line": " ew.common/src/main/java/com/eduworks/util/io/EwFileSystem.java:326"
        },
        {
            "message": "Missing item type\nDownload the content of a URL to a specific local file or a temporary\nfile if no local file is specified. Returns the local file used.",
            "line": " ew.common/src/main/java/com/eduworks/util/io/EwFileSystem.java:350"
        },
        {
            "message": "Missing item type\nUtility class designed to hold a pair of typed objects. Useful for creating\nlists of pairs or for returning two values from a function.\n\nNote that this is a TUple, not a more general N-Tuple (though you can use an\narray of Object to get pretty close). ThreeTuple, FourTuple, and such can be\nwritten as needed.\n\nThis class is technically comparable, but this works only if the first\nelement is of a comparable type. If you try otherwise it returns a\nUnsupportedOperationException. You can test if it's comparable using:\n\nmyTuple.getKey() instanceof Comparable",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:5"
        },
        {
            "message": "Missing item type\nConstructor. Note that this object is not mutable, so the two values MUST\nbe set in the constructor.",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:31"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:46"
        },
        {
            "message": "Missing item type",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:54"
        },
        {
            "message": "Missing item type\nReturns the hash code. Has to match the way equals() works.",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:62"
        },
        {
            "message": "Missing item type\nReturn true if the given object represents the same information as\nmyself. True only if it is a tuple and the first and second items are\nequal to the first and second items in the original.",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:70"
        },
        {
            "message": "Missing item type\nReturn a humnan-readable representation of myself.",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:93"
        },
        {
            "message": "Missing item type\nCompare with another tuple. This works only if the first (T) type is a\ncomparable, otherwise it throws an exception.",
            "line": " ew.common/src/main/java/com/eduworks/util/Tuple.java:101"
        },
        {
            "message": "Missing item type\nHelper class to get the version number from the version file.",
            "line": " ew.common/src/main/java/com/eduworks/EwVersion.java:9"
        },
        {
            "message": "Missing item type\nGets the version from the version file.",
            "line": " ew.common/src/main/java/com/eduworks/EwVersion.java:17"
        },
        {
            "message": "Missing item type\nCouch specific JSON utility. For more general JSON utility see {@link EwJson}",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/util/JSONUtils.java:32"
        },
        {
            "message": "Missing item type\nCreates an AdHoc view... this basically just creates a new View with a name\nof \"_temp_view\" and a defined function.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/AdHocView.java:19"
        },
        {
            "message": "Missing item type\nThe CouchResponse parses the HTTP response returned by the CouchDB server.\nThis is almost never called directly by the user, but indirectly through the\nSession and Database objects.\n<p>\nGiven a CouchDB response, it will determine if the request was successful\n(status 200,201,202), or was an error. If there was an error, it parses the\nreturned json error message.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:44"
        },
        {
            "message": "Missing item type\nC-tor parses the method results to build the CouchResponse object. First,\nit reads the body (hence the IOException) from the method Next, it checks\nthe status codes to determine if the request was successful. If there was\nan error, it parses the error codes.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:70"
        },
        {
            "message": "Missing item type\nA better toString for this object... can be very verbose though.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:178"
        },
        {
            "message": "Missing item type\nRetrieves the body of the request as a JSONArray object. (such as listing\ndatabase names)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:187"
        },
        {
            "message": "Missing item type\nWas the request successful?",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:201"
        },
        {
            "message": "Missing item type\nWhat was the error id?",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:211"
        },
        {
            "message": "Missing item type\nwhat was the error reason given?",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:225"
        },
        {
            "message": "Missing item type\nReturns the body of the response as a JSON Object (such as for a\ndocument)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:239"
        },
        {
            "message": "Missing item type\nRetrieves a specific header from the response (not really used anymore)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/CouchResponse.java:255"
        },
        {
            "message": "Missing item type\nThis represents a particular database on the CouchDB server\n\nUsing this object, you can get/create/update/delete documents. You can also\ncall views (named and adhoc) to query the underlying database.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:38"
        },
        {
            "message": "Missing item type\nC-tor only used by the Session object. You'd never call this directly.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:58"
        },
        {
            "message": "Missing item type\nThe name of the database",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:74"
        },
        {
            "message": "Missing item type\nThe number of documents in the database <b>at the time that it was\nretrieved from the session</b> This number probably isn't accurate after\nthe initial load... so if you want an accurate assessment, call\nSession.getDatabase() again to reload a new database object.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:84"
        },
        {
            "message": "Missing item type\nThe update seq from the initial database load. The update sequence is the\n'revision id' of an entire database. Useful for getting all documents in\na database since a certain revision",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:97"
        },
        {
            "message": "Missing item type\nRuns the standard \"_all_docs\" view on this database",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:110"
        },
        {
            "message": "Missing item type\nGets all design documents",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:122"
        },
        {
            "message": "Missing item type\nRuns the standard \"_all_docs\" view on this database, with count",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:137"
        },
        {
            "message": "Missing item type\nRuns \"_all_docs_by_update_seq?startkey=revision\" view on this database",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:195"
        },
        {
            "message": "Missing item type\nRuns a named view on the database This will run a view and apply any\nfiltering that is requested (reverse, startkey, etc).",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:208"
        },
        {
            "message": "Missing item type\nRuns a view, appending \"_view\" to the request if isPermanentView is true.\n*",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:221"
        },
        {
            "message": "Missing item type\nRuns a named view <i>Not currently working in CouchDB code</i>",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:256"
        },
        {
            "message": "Missing item type\nRuns an ad-hoc view from a string",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:309"
        },
        {
            "message": "Missing item type\nRuns an ad-hoc view from an AdHocView object. You probably won't use this\nmuch, unless you want to add filtering to the view (reverse, startkey,\netc...)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:321"
        },
        {
            "message": "Missing item type\nSave a document at the given _id\n\nif the docId is null or empty, then this performs a POST to the database\nand retrieves a new _id.\n\nOtherwise, a PUT is called.\n\nEither way, a new _id and _rev are retrieved and updated in the Document\nobject",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:345"
        },
        {
            "message": "Missing item type\nSave a document w/o specifying an id (can be null)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:412"
        },
        {
            "message": "Missing item type\nRetrieves a document from the CouchDB database",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:542"
        },
        {
            "message": "Missing item type\nRetrieves a document from the database and asks for a list of it's\nrevisions. The list of revision keys can be retrieved from\nDocument.getRevisions();",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:555"
        },
        {
            "message": "Missing item type\nRetrieves a specific document revision",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:570"
        },
        {
            "message": "Missing item type\nRetrieves a specific document revision and (optionally) asks for a list\nof all revisions",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:584"
        },
        {
            "message": "Missing item type\nDeletes a document",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:646"
        },
        {
            "message": "Missing item type\nGets attachment",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:684"
        },
        {
            "message": "Missing item type\nPuts attachment to the doc",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Database.java:700"
        },
        {
            "message": "Missing item type\nEverything in CouchDB is a Document. In this case, the document is an object\nbacked by a JSONObject. The Document is also aware of the database that it is\nconnected to. This allows the Document to reload it's properties when needed.\nThe only special fields are \"_id\", \"_rev\", \"_revisions\", and \"_view_*\".\n<p>\nAll document have an _id and a _rev. If this is a new document those fields\nare populated when they are saved to the CouchDB server.\n<p>\n_revisions is only populated if the document has been retrieved via\ndatabase.getDocumentWithRevisions(); So, if this document wasn't, then when\nyou call document.getRevisions(), it will go back to the server to reload\nitself via database.getDocumentWithRevisions().\n<p>\nThe Document can be treated like a JSONObject, eventhough it doesn't extend\nJSONObject (it's final).\n<p>\nYou can also get/set values by calling document.get(key),\ndocument.put(key,value), just like a Map.\n<p>\nYou can get a handle on the backing JSONObject by calling\ndocument.getJSONObject(); If this hasn't been loaded yet, it will load the\ndata itself using the given database connection.\n<p>\nIf you got this Document from a view, you are likely missing elements. To\nload them you can call document.load().",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:34"
        },
        {
            "message": "Missing item type\nCreate a new Document",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:76"
        },
        {
            "message": "Missing item type\nCreate a new Document from a JSONObject",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:85"
        },
        {
            "message": "Missing item type\nLoad data into this document from a differing JSONObject\n<p>\nThis is mainly for reloading data for an object that was retrieved from a\nview. This version doesn't overwrite any unsaved data that is currently\npresent in this object.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:96"
        },
        {
            "message": "Missing item type\nThis document's id (if saved)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:120"
        },
        {
            "message": "Missing item type\nThis strips _design from the document id",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:142"
        },
        {
            "message": "Missing item type\nThis document's Revision (if saved)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:160"
        },
        {
            "message": "Missing item type\nA list of the revision numbers that this document has. If this hasn't\nbeen populated with a \"full=true\" query, then the database will be\nre-queried",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:185"
        },
        {
            "message": "Missing item type\nGet a named view that is stored in the document.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:214"
        },
        {
            "message": "Missing item type\nAdd a view to this document. If a view function already exists with the\ngiven viewName it is overwritten.\n<p>\nThis isn't persisted until the document is saved.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:234"
        },
        {
            "message": "Missing item type\nRemoves a view from this document.\n<p>\nThis isn't persisted until the document is saved.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:270"
        },
        {
            "message": "Missing item type\nLoads data from the server for this document. Actually requests a new\ncopy of data from the server and uses that to populate this document.\nThis doesn't overwrite any unsaved data.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:287"
        },
        {
            "message": "Missing item type\nRetrieves the backing JSONObject",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Document.java:317"
        },
        {
            "message": "Missing item type\nThe Session is the main connection to the CouchDB instance. However, you'll\nonly use the Session to obtain a reference to a CouchDB Database. All of the\nmain work happens at the Database level.\n<p>\nIt uses the Apache's HttpClient library for all communication with the\nserver. This is a little more robust than the standard URLConnection.\n<p>\nEx usage: <br>\nSession session = new Session(host,port); Database db =\nsession.getDatabase(\"dbname\");",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:75"
        },
        {
            "message": "Missing item type\nConstructor for obtaining a Session with an HTTP-AUTH username/password\nand (optionally) a secure connection This isn't supported by CouchDB -\nyou need a proxy in front to use this",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:143"
        },
        {
            "message": "Missing item type\nConstructor for obtaining a Session with an HTTP-AUTH username/password\nThis isn't supported by CouchDB - you need a proxy in front to use this",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:206"
        },
        {
            "message": "Missing item type\nMain constructor for obtaining a Session.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:224"
        },
        {
            "message": "Missing item type\nOptional constructor that indicates an HTTPS connection should be used.\nThis isn't supported by CouchDB - you need a proxy in front to use this",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:237"
        },
        {
            "message": "Missing item type\nRead-only",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:253"
        },
        {
            "message": "Missing item type\nread-only",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:263"
        },
        {
            "message": "Missing item type\nIs this a secured connection (set in constructor)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:273"
        },
        {
            "message": "Missing item type\nRetrieves a list of all database names from the server",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:283"
        },
        {
            "message": "Missing item type\nLoads a database instance from the server",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:303"
        },
        {
            "message": "Missing item type\nCreates a new database (if the name doesn't already exist)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:326"
        },
        {
            "message": "Missing item type\nDeletes a database (by name) from the CouchDB server.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:354"
        },
        {
            "message": "Missing item type\nDeletes a database from the CouchDB server",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:369"
        },
        {
            "message": "Missing item type\nFor a given url (such as /_all_dbs/), build the database connection url",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:383"
        },
        {
            "message": "Missing item type\nPackage level access to send a DELETE request to the given URL",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:417"
        },
        {
            "message": "Missing item type\nSend a POST with no body / parameters",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:430"
        },
        {
            "message": "Missing item type\nSend a POST with body",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:442"
        },
        {
            "message": "Missing item type\nSend a POST with a body and query string",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:455"
        },
        {
            "message": "Missing item type\nSend a PUT (for creating databases)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:485"
        },
        {
            "message": "Missing item type\nSend a PUT with a body (for creating documents)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:497"
        },
        {
            "message": "Missing item type\nOverloaded Put using by attachments",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:525"
        },
        {
            "message": "Missing item type\nSend a GET request",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:554"
        },
        {
            "message": "Missing item type\nSend a GET request with a number of name/value pairs as a query string",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:573"
        },
        {
            "message": "Missing item type\nSend a GET request with a queryString (?foo=bar)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:587"
        },
        {
            "message": "Missing item type\nMethod that actually performs the GET/PUT/POST/DELETE calls. Executes the\ngiven HttpMethod on the HttpClient object (one HttpClient per Session).\n<p>\nThis returns a CouchResponse, which can be used to get the status of the\ncall (isOk), and any headers / body that was sent back.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/Session.java:601"
        },
        {
            "message": "Missing item type\nThe View is the mechanism for performing Querys on a CouchDB instance. The\nview can be named or ad-hoc (see AdHocView). (Currently [14 Sept 2007] named\nview aren't working in the mainline CouchDB code... but this _should_ work.)\n<p>\nThe View object exists mainly to apply filtering to the view. Otherwise,\nviews can be called directly from the database object by using their names\n(or given an ad-hoc query).",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:22"
        },
        {
            "message": "Missing item type\nBuild a view given a document and a name",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:50"
        },
        {
            "message": "Missing item type\nBuild a view given only a fullname ex: (\"_add_docs\", \"_temp_view\")",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:62"
        },
        {
            "message": "Missing item type\nBuilds a new view for a document, a given name, and the function\ndefinition. This <i>does not actually add it to the document</i>. That is\nhandled by Document.addView()\n<p>\nThis constructor should only be called by Document.addView();",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:73"
        },
        {
            "message": "Missing item type\nBased upon settings, builds the queryString to add to the URL for this\nview.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:91"
        },
        {
            "message": "Missing item type\nThe number of entries to return",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:163"
        },
        {
            "message": "Missing item type\nStop listing at this key",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:190"
        },
        {
            "message": "Missing item type\nReverse the listing",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:200"
        },
        {
            "message": "Missing item type\nSkip listing these keys (not sure if this works, or the format)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:216"
        },
        {
            "message": "Missing item type\nStart listing at this key",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:226"
        },
        {
            "message": "Missing item type\nNot sure... might be for batch updates, but not sure.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:236"
        },
        {
            "message": "Missing item type\nThe name for this view (w/o doc id)",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:256"
        },
        {
            "message": "Missing item type\nthe full name for this view (w/ doc id, if avail) in the form of :\n\"docid:name\" or \"name\"",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:266"
        },
        {
            "message": "Missing item type\nThe function definition for this view, if it is available.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/View.java:277"
        },
        {
            "message": "Missing item type\nThe results of a view request is just a specialized Document object.\nYou can use ViewResults to retrieve information about the results (such as the \nnumber of rows returned).\n<p>\nThe ViewResults document contains a JSONArray named \"rows\".  This JSON array contains\nfurther sub-Documents.  These documents include the _id and _rev of the matched Documents as\nwell as any other fields that the View function returns -- it is not the full Document.\n<p>\nIn order to retrieve the full document, you must call database.getDocument(id).",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java:28"
        },
        {
            "message": "Missing item type\nBuilds the ViewResults object from the given JSON object. (called only from Database.view())\nThis shouldn't be called by user code.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java:46"
        },
        {
            "message": "Missing item type\nRetrieves a list of documents that matched this View.\nThese documents only contain the data that the View has returned (not the full document).\n<p>\nYou can load the remaining information from Document.reload();",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java:57"
        },
        {
            "message": "Missing item type\nThe new that created this results list.",
            "line": " ew.db.couchdb/src/main/java/com/fourspaces/couchdb/ViewResults.java:81"
        },
        {
            "message": "Missing item type\nClass AnimatedGifEncoder - Encodes a GIF file consisting of one or more\nframes.\n\n<pre>\nExample:\n   AnimatedGifEncoder e = new AnimatedGifEncoder();\n   e.start(outputFileName);\n   e.setDelay(1000);   // 1 frame per sec\n   e.addFrame(image1);\n   e.addFrame(image2);\n   e.finish();\n</pre>\n\nNo copyright asserted on the source code of this class. May be used for any\npurpose, however, refer to the Unisys LZW patent for restrictions on use of\nthe associated LZWEncoder class. Please forward any corrections to questions\nat fmsware.com.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:12"
        },
        {
            "message": "Missing item type\nSets the delay time between each frame, or changes it for subsequent\nframes (applies to last frame added).",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:60"
        },
        {
            "message": "Missing item type\nSets the GIF frame disposal code for the last added frame and any\nsubsequent frames. Default is 0 if no transparent color has been set,\notherwise 2.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:72"
        },
        {
            "message": "Missing item type\nSets the number of times the set of GIF frames should be played. Default\nis 1; 0 means play indefinitely. Must be invoked before the first image\nis added.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:88"
        },
        {
            "message": "Missing item type\nSets the transparent color for the last added frame and any subsequent\nframes. Since all colors are subject to modification in the quantization\nprocess, the color in the final palette for each frame closest to the\ngiven color becomes the transparent color for that frame. May be set to\nnull to indicate no transparent color.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:104"
        },
        {
            "message": "Missing item type\nAdds next GIF frame. The frame is not written immediately, but is\nactually deferred until the next frame is received so that timing data\ncan be inserted. Invoking <code>finish()</code> flushes all frames. If\n<code>setSize</code> was not invoked, the size of the first image is used\nfor all subsequent frames.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:119"
        },
        {
            "message": "Missing item type\nFlushes any pending data and closes output file. If writing to an\nOutputStream, the stream is not closed.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:174"
        },
        {
            "message": "Missing item type\nSets frame rate in frames per second. Equivalent to\n<code>setDelay(1000/fps)</code>.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:213"
        },
        {
            "message": "Missing item type\nSets quality of color quantization (conversion of images to the maximum\n256 colors allowed by the GIF specification). Lower values (minimum = 1)\nproduce better colors, but slow processing significantly. 10 is the\ndefault, and produces good color mapping at reasonable speeds. Values\ngreater than 20 do not yield significant improvements in speed.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:228"
        },
        {
            "message": "Missing item type\nSets the GIF frame size. The default size is the size of the first frame\nadded if this method is not invoked.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:245"
        },
        {
            "message": "Missing item type\nInitiates GIF file creation on the given stream. The stream is not closed\nautomatically.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:267"
        },
        {
            "message": "Missing item type\nInitiates writing of a GIF file with the specified name.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:293"
        },
        {
            "message": "Missing item type\nAnalyzes image colors and creates color map.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:316"
        },
        {
            "message": "Missing item type\nReturns index of palette color closest to c",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:353"
        },
        {
            "message": "Missing item type\nExtracts image pixels into byte array \"pixels\"",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:387"
        },
        {
            "message": "Missing item type\nWrites Graphic Control Extension",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:406"
        },
        {
            "message": "Missing item type\nWrites Image Descriptor",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:445"
        },
        {
            "message": "Missing item type\nWrites Logical Screen Descriptor",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:475"
        },
        {
            "message": "Missing item type\nWrites Netscape application extension to define repeat count.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:496"
        },
        {
            "message": "Missing item type\nWrites color table",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:514"
        },
        {
            "message": "Missing item type\nEncodes and writes pixel data",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:530"
        },
        {
            "message": "Missing item type\nWrite 16-bit value to output stream, LSB first",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:542"
        },
        {
            "message": "Missing item type\nWrites string to output stream",
            "line": " ew.image/src/main/java/com/fms/gif/animated/AnimatedGifEncoder.java:556"
        },
        {
            "message": "Missing item type\nClass GifDecoder - Decodes a GIF file into one or more frames.\n \n \nNo copyright asserted on the source code of this class.  May be used for\nany purpose, however, refer to the Unisys LZW patent for any additional\nrestrictions.  Please forward any corrections to questions at fmsware.com.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:17"
        },
        {
            "message": "Missing item type\nFile read status: No errors.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:32"
        },
        {
            "message": "Missing item type\nFile read status: Error decoding file (may be partially decoded)",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:37"
        },
        {
            "message": "Missing item type\nFile read status: Unable to open source.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:42"
        },
        {
            "message": "Missing item type\nGets display duration for specified frame.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:106"
        },
        {
            "message": "Missing item type\nGets the number of frames read from file.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:121"
        },
        {
            "message": "Missing item type\nGets the first (or only) image read.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:129"
        },
        {
            "message": "Missing item type\nGets the \"Netscape\" iteration count, if any.\nA count of 0 means repeat indefinitiely.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:138"
        },
        {
            "message": "Missing item type\nCreates new frame image from current data (and previous\nframes as specified by their disposition codes).",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:148"
        },
        {
            "message": "Missing item type\nGets the image contents of frame n.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:239"
        },
        {
            "message": "Missing item type\nGets image size.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:253"
        },
        {
            "message": "Missing item type\nReads GIF image from stream",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:262"
        },
        {
            "message": "Missing item type\nReads GIF image from stream",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:289"
        },
        {
            "message": "Missing item type\nReads GIF file from specified file/URL source  \n(URL assumed if name contains \":/\" or \"file:\")",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:318"
        },
        {
            "message": "Missing item type\nDecodes LZW image data into pixel array.\nAdapted from John Cristy's ImageMagick.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:344"
        },
        {
            "message": "Missing item type\nReturns true if an error was encountered during reading/decoding",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:476"
        },
        {
            "message": "Missing item type\nInitializes or re-initializes reader",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:484"
        },
        {
            "message": "Missing item type\nReads a single byte from the input stream.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:495"
        },
        {
            "message": "Missing item type\nReads next variable length block from input.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:509"
        },
        {
            "message": "Missing item type\nReads color table as 256 RGB integer values",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:536"
        },
        {
            "message": "Missing item type\nMain file parser.  Reads GIF content blocks.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:567"
        },
        {
            "message": "Missing item type\nReads Graphics Control Extension values",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:619"
        },
        {
            "message": "Missing item type\nReads GIF file header information.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:635"
        },
        {
            "message": "Missing item type\nReads next frame image",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:655"
        },
        {
            "message": "Missing item type\nReads Logical Screen Descriptor",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:713"
        },
        {
            "message": "Missing item type\nReads Netscape extenstion to obtain iteration count",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:733"
        },
        {
            "message": "Missing item type\nReads next 16-bit value, LSB first",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:748"
        },
        {
            "message": "Missing item type\nResets frame state for reading next image.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:757"
        },
        {
            "message": "Missing item type\nSkips variable length blocks up to and including\nnext zero length block.",
            "line": " ew.image/src/main/java/com/fms/gif/animated/GifDecoder.java:771"
        },
        {
            "message": "Missing item type\nAn API for Resolver enumerations that define a set of keys or values for an operation.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java:3"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java:11"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/enumeration/CruncherEnum.java:14"
        },
        {
            "message": "Missing item type\nReplace special characters with XML escapes:",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java:44"
        },
        {
            "message": "Missing item type\nConvert a JSONObject into a well-formed, element-normal XML string.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java:81"
        },
        {
            "message": "Missing item type\nConvert a JSONObject into a well-formed, element-normal XML string.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/io/CruncherDisplayXml.java:94"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java:42"
        },
        {
            "message": "Missing item type\nConverts encrypted bytes to a consistent format not affected by url\nencoding.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java:81"
        },
        {
            "message": "Missing item type\nGenerates an unpredictable, but consistent byte sequence for consistent\ndecoding.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java:122"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java:136"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherDecrypt.java:151"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java:41"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java:78"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java:114"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java:127"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/security/CruncherEncrypt.java:141"
        },
        {
            "message": "Missing item type\nSends an email using the parameters passed in.\n\nThe template value searches for \"${from}\" Email sending has no return\nvalue, so this method just returns the body of the email sent.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/service/CruncherSendEmail.java:20"
        },
        {
            "message": "Missing item type\nReplaces $(key) in the format string with the corresponding value from this JSONObject,\nor the attached parameters. Setting keys and any keys specified in the ignore array may\nnot be referenced in the format string, or an exception is thrown.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/service/CruncherSendEmail.java:77"
        },
        {
            "message": "Missing item type\nCapitalizes a single word, or all the words in a string\n(does not handle camel-case, acronyms, or special chars).",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java:84"
        },
        {
            "message": "Missing item type\nReplaces $(key) in the format string with the corresponding value from this JSONObject,\nor the attached parameters. Setting keys and any keys specified in the ignore array may\nnot be referenced in the format string, or an exception is thrown.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java:118"
        },
        {
            "message": "Missing item type\nTitle case sentence, or capitalize a word: if lowerFirst is false,\ncamel-cased words are parsed, and acronyms such as \"JSONObject\" are separated:\n\"JSON Object\". In either case, underscores '_' and spaces delimit words,\nwhereas words with dashes '-' and single quotes are considered single words.",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java:231"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.base/src/main/java/com/eduworks/resolver/string/CruncherString.java:333"
        },
        {
            "message": "Missing item type\nBoth GET and POST execute in the same fashion. The only difference is\nthat a GET is guaranteed not to have datastreams (files) attached to it.",
            "line": " ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java:37"
        },
        {
            "message": "Missing item type\nBoth GET and POST execute in the same fashion. The only difference is\nthat a GET is guaranteed not to have datastreams (files) attached to it.",
            "line": " ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java:59"
        },
        {
            "message": "Missing item type\nAppropriately wraps a JSONP call if the request has a callback parameter.\nThis is required by cross-domain ajax service calls. See: <a\nhref=\"http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\"\n>this link</a>",
            "line": " ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java:121"
        },
        {
            "message": "Missing item type\nGet an integer value from the request object, defaulting to a known value\nif it is not present.",
            "line": " ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java:154"
        },
        {
            "message": "Missing item type\nGet value from the request object, defaulting to a known value if it is\nnot present.",
            "line": " ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java:173"
        },
        {
            "message": "Missing item type\nGet an string value from the request object, defaulting to a known value\nif it is not present.",
            "line": " ew.levr.core/src/main/java/com/eduworks/levr/servlet/LevrServlet.java:194"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.core/src/main/java/com/eduworks/resolver/lang/LevrJsParser.java:30"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.core/src/main/java/com/eduworks/resolver/CruncherBindWebService.java:15"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.core/src/main/java/com/eduworks/resolver/CruncherJavascriptBinder.java:17"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.core/src/main/java/com/eduworks/resolver/ResolverFactory.java:37"
        },
        {
            "message": "Missing item type\nHello world!",
            "line": " ew.levr.core/src/main/java/com/eduworks/App.java:3"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java:46"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java:52"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java:58"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java:64"
        },
        {
            "message": "Missing item type\nChecks the security of the document, throwing a security exception if the\npassword has been violated.",
            "line": " ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java:70"
        },
        {
            "message": "Missing item type",
            "line": " ew.levr.db.couchdb/src/main/java/com/eduworks/resolver/db/couchdb/CruncherDocument.java:103"
        },
        {
            "message": "Missing item type\nBCrypt implements OpenBSD-style Blowfish password hashing using\nthe scheme described in \"A Future-Adaptable Password Scheme\" by\nNiels Provos and David Mazieres.\n<p>\nThis password hashing system tries to thwart off-line password\ncracking using a computationally-intensive hashing algorithm,\nbased on Bruce Schneier's Blowfish cipher. The work factor of\nthe algorithm is parameterised, so it can be increased as\ncomputers get faster.\n<p>\nUsage is really simple. To hash a password for the first time,\ncall the hashpw method with a random salt, like this:\n<p>\n<code>\nString pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); <br>\n</code>\n<p>\nTo check whether a plaintext password matches one that has been\nhashed previously, use the checkpw method:\n<p>\n<code>\nif (BCrypt.checkpw(candidate_password, stored_hash))<br>\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"It matches\");<br>\nelse<br>\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"It does not match\");<br>\n</code>\n<p>\nThe gensalt() method takes an optional parameter (log_rounds)\nthat determines the computational complexity of the hashing:\n<p>\n<code>\nString strong_salt = BCrypt.gensalt(10)<br>\nString stronger_salt = BCrypt.gensalt(12)<br>\n</code>\n<p>\nThe amount of work increases exponentially (2**log_rounds), so \neach increment is twice as much work. The default log_rounds is\n10, and the valid range is 4 to 31.",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:20"
        },
        {
            "message": "Missing item type\nEncode a byte array using bcrypt's slightly-modified base64\nencoding scheme. Note that this is *not* compatible with\nthe standard MIME-base64 encoding.",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:375"
        },
        {
            "message": "Missing item type\nLook up the 3 bits base64-encoded by the specified character,\nrange-checking againt conversion table",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:418"
        },
        {
            "message": "Missing item type\nDecode a string encoded using bcrypt's base64 scheme to a\nbyte array. Note that this is *not* compatible with\nthe standard MIME-base64 encoding.",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:430"
        },
        {
            "message": "Missing item type\nBlowfish encipher a single 64-bit block encoded as\ntwo 32-bit halves",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:480"
        },
        {
            "message": "Missing item type\nCycically extract a word of key material",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:509"
        },
        {
            "message": "Missing item type\nInitialise the Blowfish key schedule",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:530"
        },
        {
            "message": "Missing item type\nKey the Blowfish cipher",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:538"
        },
        {
            "message": "Missing item type\nPerform the \"enhanced key schedule\" step described by\nProvos and Mazieres in \"A Future-Adaptable Password Scheme\"\nhttp://www.openbsd.org/papers/bcrypt-paper.ps",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:564"
        },
        {
            "message": "Missing item type\nPerform the central password hashing step in the\nbcrypt scheme",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:597"
        },
        {
            "message": "Missing item type\nHash a password using the OpenBSD bcrypt scheme",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:640"
        },
        {
            "message": "Missing item type\nGenerate a salt for use with the BCrypt.hashpw() method",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:697"
        },
        {
            "message": "Missing item type\nGenerate a salt for use with the BCrypt.hashpw() method",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:720"
        },
        {
            "message": "Missing item type\nGenerate a salt for use with the BCrypt.hashpw() method,\nselecting a reasonable default for the number of hashing\nrounds to apply",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:731"
        },
        {
            "message": "Missing item type\nCheck that a plaintext password matches a previously hashed\none",
            "line": " ew.levr.security/src/main/java/com/eduworks/cruncher/security/BCrypt.java:741"
        },
        {
            "message": "Missing item type\nLoads an existing ontology from the local directory and wraps it in an\nOntology object to be manipulated",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:156"
        },
        {
            "message": "Missing item type\nCreates a new ontology file in the local directory and then loads and\nwraps it in an Ontology object",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:225"
        },
        {
            "message": "Missing item type\nConstructor for creating/loading a new ontology, wraps the ontology given\nand saves the",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:285"
        },
        {
            "message": "Missing item type\nSaves the underlying ontology after modifications to the ontology that\nneed to be propogated for queries",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:301"
        },
        {
            "message": "Missing item type\nReturns the OntologyClass object for the classId specified",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:367"
        },
        {
            "message": "Missing item type\nReturns a map from classId to OntologyClass of all of the classes in this\nontology",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:424"
        },
        {
            "message": "Missing item type\nCreates a new instance of a class with the property values given",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:459"
        },
        {
            "message": "Missing item type\nReturns the OntologyInstance object for the instanceId specified",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:483"
        },
        {
            "message": "Missing item type\nReturns the OntologyProperty object for the propertyId specified",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:623"
        },
        {
            "message": "Missing item type\nReturns a Map from propertyId to OntologyProperty object of all of the\nproperties in this ontology",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:682"
        },
        {
            "message": "Missing item type\nReturns a Map from propertyId to OntologyProperty object of all of the\ndata properties in this ontology",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:743"
        },
        {
            "message": "Missing item type\nReturns a Map from propertyId to OntologyProperty object of all of the\nobject properties in this ontology",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/Ontology.java:776"
        },
        {
            "message": "Missing item type\nCreates a new Ontology Class Object, saving the necessary data for future\nmanipulation/querying of the class. There is no guarantee that the class\nalready exists in the ontology, this could be creating a new class right\nnow",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java:411"
        },
        {
            "message": "Missing item type",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java:518"
        },
        {
            "message": "Missing item type\nReturns all of the Ontology Instances of this class in a map",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java:527"
        },
        {
            "message": "Missing item type\nReturns a JSONObject that contains the information that represents this\nclass of the form: Where propId is an (idChar)-formatted Id of a property",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java:559"
        },
        {
            "message": "Missing item type\nReturns the Ontology that this class is a part of",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyClass.java:761"
        },
        {
            "message": "Missing item type\nCreates a new Instance of the Class that is passed in with the values of\nproperties being those that are passed in",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java:32"
        },
        {
            "message": "Missing item type\n(DANGER) Creates a new OntologyInstance, wrapping the OWLAPI object\npassed in, assumes ontology passed in is the ontology in which the\ninstance is within",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java:437"
        },
        {
            "message": "Missing item type\nCreates a new OntologyInstance by looking through ontology passed in and\nfinding the Instance that is referenced by the IRI passed in. There is no\nguarantee that the instance exists, this could be creating the instance",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java:470"
        },
        {
            "message": "Missing item type\nUpdates the OntologyInstance with the values passed in",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java:496"
        },
        {
            "message": "Missing item type\nDelete's the instance from it's ontology",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java:731"
        },
        {
            "message": "Missing item type\nReturns a JSONObject that represents this instance in the form:",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyInstance.java:741"
        },
        {
            "message": "Missing item type\nCreates an OntologyProperty Wrapper to wrap the OWLAPI OWLProperty passed\nin, assumes that the ontology passed in is the owner of the property",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java:393"
        },
        {
            "message": "Missing item type\nDelete's the property and removes any references to it from the ontology",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java:724"
        },
        {
            "message": "Missing item type\nReturns a JSONObject representing this property of the form: If the\nproperty is an object property it will also have the following true/false\nfields: symmetric, inverse-functional, transitive, asymmetric, reflexive,\nand irreflexive. It will also have the following 'inverses' @\npropertyId field",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyProperty.java:732"
        },
        {
            "message": "Missing item type\nReturns the Id of the OntologyObject (the part after the # in the IRI), should convert it to the @-format that can be sent across \nweb services and still be recognized as an ID",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyWrapper.java:11"
        },
        {
            "message": "Missing item type\nReturns the Full IRI of the OntologyObject",
            "line": " ew.ontology/src/main/java/com/eduworks/ontology/OntologyWrapper.java:18"
        }
    ]
}