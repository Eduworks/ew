// Copyright 2015-2016 Eduworks Corporation and other contributing parties.
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

usernameSalt = #fileLoad(path="skyId.username.public.salt").fileToString();
usernameSalt = #if(
	operator=#fileExists(path="skyId.username.public.salt"),
	operand="false",
	eq=#object(
		a=#fileSave(obj=#randomString(length="2048"),path="skyId.username.public.salt"),
		b=usernameSalt
	).cget(b=""),
	ne=usernameSalt
).cache(name="skyIdUsernameSalt");

passwordSalt = #fileLoad(path="skyId.password.public.salt").fileToString();
passwordSalt = #if(
	operator=#fileExists(path="skyId.password.public.salt"),
	operand="false",
	eq=#object(
		a=#fileSave(obj=#randomString(length="2048"),path="skyId.password.public.salt"),
		b=passwordSalt
	).cget(b=""),
	ne=passwordSalt
).cache(name="skyIdPasswordSalt");

secretSalt = #fileLoad(path="skyId.secret.public.salt").fileToString();
secretSalt = #if(
	operator=#fileExists(path="skyId.secret.public.salt"),
	operand="false",
	eq=#object(
		a=#fileSave(obj=#randomString(length="2048"),path="skyId.secret.public.salt"),
		b=secretSalt
	).cget(b=""),
	ne=secretSalt
).cache(name="skyIdSecretSalt");

salts=#object(
	usernameSalt=usernameSalt,
	usernameIterations=#toInteger(obj="5000"),
	usernameLength=#toInteger(obj="64"),
	passwordSalt=passwordSalt,
	passwordIterations=#toInteger(obj="5000"),
	passwordLength=#toInteger(obj="64"),
	secretSalt=secretSalt,
	secretIterations=#toInteger(obj="5000"),
	secretLength=#toInteger(obj="32")
).displayJson(_collapse="true");
/sky/id/salts=salts;

salt = #fileLoad(path="skyId.salt").fileToString();
salt = #if(
	operator=#fileExists(path="skyId.salt"),
	operand="false",
	eq=#object(
		a=#fileSave(obj=#randomString(length="2048"),path="skyId.salt"),
		b=salt
	).cget(b=""),
	ne=salt
).cache(name="skyIdSalt");

secret=#fileLoad(path="skyId.secret").fileToString();
secret=#if(
	operator=#fileExists(path="skyId.secret"),
	operand="false",
	eq=#object(
		a=#fileSave(obj=#randomString(length="2048"),path="skyId.secret"),
		b=secret
	).cget(b=""),
	ne=secret
);

#skyIdSecret = secret;

secret=#pbkdf2(
	obj=secret,
	salt=salt,
	iterations="10000",
	hashLength="16"
).cache(name="skyidSecret");

ppk=#fileLoad(path="skyId.pem").fileToString();
ppk=#if(
	operator=#fileExists(path="skyId.pem"),
	operand="false",
	eq=#object(
		a=#fileSave(obj=#rsaGenerate(),path="skyId.pem"),
		b=ppk
	).cget(b=""),
	ne=ppk
).cache(name="skyidPpk");

saltedId=#pbkdf2(
	obj="@id",
	salt=salt,
	iterations="10000",
	hashLength="16"
);

saltedPassword=#pbkdf2(
	obj="@password",
	salt=salt,
	iterations="10000",
	hashLength="64"
);

signatureSheet=#object(
	filename="signatureSheet.json",
	mimeType="application/json",
	data=#object(
		a=#toObject(obj="@signableObject").put(
			_key=#signature(),
			_value=#toObject(obj="@signableObject").rsaSign(ppk=ppk)
		).call(
			signableObject=#object(
				expiry=#date(_raw="true").add(z="10000").toLong()
			).put(
				_key=#type(),
				_value="http://schema.cassproject.org/kbac/0.2/TimeLimitedSignature"
			).put(
				_key=#owner(),
				_value=ppk.rsaPpkToPk()
			)
		)
	).valueSet().toString()
).stringToFile();

getAnyBySaltedId=#object(
	a=#skyrepoGet(
		type="schema.cassproject.org.kbac.0.2.EncryptedValue",
		id=saltedId
	).cget(payload=""),
	b=#skyrepoGet(
		type="schema.eduworks.com.ebac.0.2.encryptedValue",
		id=saltedId
	).cget(payload=""),
	c=#skyrepoGet(
		type="schema.eduworks.com.ebac.0.1.encryptedValue",
		id=saltedId
	).cget(payload="")
).valueSet().union().getIndex(index="0");

retrieve=#aesDecrypt(
	obj=getAnyBySaltedId,
	secret=secret,
	iv=saltedId
).toObject();

payload=#object(
	payload = #toObject(obj="@payload").aesEncrypt(
		secret=secret,
		iv=saltedId
	)
).put(
	_key=#context(),
	_value="http://schema.cassproject.org/kbac/0.2/"
).put(
	_key=#type(),
	_value="EncryptedValue"
).put(
	_key=#owner(),
	_value=ppk.rsaPpkToPk()
);

retrieveFormally=#if(
	operator=saltedPassword,
	operand=retrieve.cget(password=""),
	eq=payload.call(
		payload=retrieve.put(token=#randomString(length="20"))
	).skyrepoPut(
		type="schema.cassproject.org.kbac.0.2.EncryptedValue",
		id=saltedId
	).cget(payload="").aesDecrypt(
		secret=secret,
		iv=saltedId
	).toObject().put(password=""),
	ne=#if(
		operator=retrieve,
		operand="",
		eq=#error(code="404", msg="User does not exist."),
		ne=#error(code="401", msg="Incorrect password.")
	)
);

retrieveFormally = signatureSheet.toDatastream(
	paramName="signatureSheet",
	op=retrieveFormally
);
	
#skyidRetrieve = retrieveFormally;
#skyidRetreive = retrieveFormally;

store=payload.skyrepoPut(
	type="schema.cassproject.org.kbac.0.2.EncryptedValue",
	id=saltedId
);

storeFormally=#if(
	operator=retrieve.cget(token=""),
	operand="@token",
	eq=store,
	ne=#error(code="403",msg="An error in synchronization has occurred. Please re-login and try again.")
);

storeFormally = signatureSheet.toDatastream(
	paramName="signatureSheet",
	op=storeFormally
);

storeFormally = #object(
	a=#addWhitespaceAnalyzer(),
	b=storeFormally
);

#skyidStore = storeFormally;

create=#if(
	operator=getAnyBySaltedId,
	operand="",
	eq=store
);

create = signatureSheet.toDatastream(
	paramName="signatureSheet",
	op=create
);

create = #object(
	a=#addWhitespaceAnalyzer(),
	b=create
);

#skyidCreate=create;

postData=#fileFromDatastream(name="credentialRequest");

postObject=postData.fileToString().toObject();

login=#skyidRetrieve(
	id=postObject.cget(username=""),
	password=postObject.cget(password="")
).displayJson(_collapse="true");
/sky/id/login=login;

postData=#fileFromDatastream(name="credentialCommit");

postObject=postData.fileToString().toObject();

store=#skyidStore(
	id=postObject.cget(username=""),
	password=postObject.cget(password=""),
	token=postObject.cget(token=""),
	payload=postObject.cget(credentials="").put(token=postObject.cget(token=""),password=saltedPassword.call(password=postObject.cget(password="")))
);
/sky/id/commit=store;

postData=#fileFromDatastream(name="credentialCommit");

postObject=postData.fileToString().toObject();

store=#skyidCreate(
	id=postObject.cget(username=""),
	password=postObject.cget(password=""),
	token=postObject.cget(token=""),
	payload=postObject.cget(credentials="").put(token=postObject.cget(token=""),password=saltedPassword.call(password=postObject.cget(password="")))
);
/sky/id/create=store;